From d46678a66101bcebf0ab37bfa7e5e2e61fa5a5ae Mon Sep 17 00:00:00 2001
From: yramak601 <Yashaswini_Ramakrishna@comcast.com>
Date: Wed, 24 Mar 2021 18:34:34 +0000
Subject: [PATCH] IPersistent_API_Cobalt

---
 Source/cryptography/Cryptography.cpp          |  24 +-
 Source/cryptography/ICryptography.h           |  33 +-
 .../implementation/OpenSSL/Vault.cpp          |  22 +
 .../implementation/SecApi/Hash.cpp            |   4 +-
 .../implementation/SecApi/Vault.cpp           | 404 +++++++++++++++---
 .../implementation/SecApi/Vault.h             |  10 +-
 .../implementation/Thunder/Vault.cpp          |  21 +
 .../persistent_implementation.h               |  51 +++
 8 files changed, 496 insertions(+), 73 deletions(-)
 create mode 100644 Source/cryptography/implementation/persistent_implementation.h

diff --git a/Source/cryptography/Cryptography.cpp b/Source/cryptography/Cryptography.cpp
index f1bc06a..4d4ac3d 100644
--- a/Source/cryptography/Cryptography.cpp
+++ b/Source/cryptography/Cryptography.cpp
@@ -24,6 +24,7 @@
 #include "implementation/hash_implementation.h"
 #include "implementation/cipher_implementation.h"
 #include "implementation/diffiehellman_implementation.h"
+#include "implementation/persistent_implementation.h"
 
 
 namespace WPEFramework {
@@ -67,7 +68,7 @@ namespace Implementation {
         HashImplementation* _implementation;
     }; // class HashImpl
 
-    class VaultImpl : virtual public WPEFramework::Cryptography::IVault {
+    class VaultImpl : virtual public WPEFramework::Cryptography::IVault,virtual public WPEFramework::Cryptography::IPersistent {
     public:
         VaultImpl() = delete;
         VaultImpl(const VaultImpl&) = delete;
@@ -112,6 +113,26 @@ namespace Implementation {
             return (vault_delete(_implementation, id));
         }
 
+        uint32_t Exists(const string& locator,bool& result) const override
+        {
+            return(persistent_key_exists(_implementation,locator.c_str(),&result));
+        }
+
+        uint32_t Load(const string& locator,uint32_t& id) override
+        {
+            return(persistent_key_load(_implementation,locator.c_str(),&id));
+        }
+
+        uint32_t Create(const string& locator, const keytype keyType,uint32_t&  id ) override
+        {
+            return(persistent_key_create(_implementation,locator.c_str(), static_cast<key_type>(keyType),&id));
+        }
+
+        uint32_t Flush() override
+        {
+            return(persistent_flush(_implementation));
+        }
+
         VaultImplementation* Implementation()
         {
             return _implementation;
@@ -278,6 +299,7 @@ namespace Implementation {
     public:
         BEGIN_INTERFACE_MAP(VaultImpl)
         INTERFACE_ENTRY(WPEFramework::Cryptography::IVault)
+        INTERFACE_ENTRY(WPEFramework::Cryptography::IPersistent)
         END_INTERFACE_MAP
 
     private:
diff --git a/Source/cryptography/ICryptography.h b/Source/cryptography/ICryptography.h
index 6cbccfb..f0715b0 100644
--- a/Source/cryptography/ICryptography.h
+++ b/Source/cryptography/ICryptography.h
@@ -34,7 +34,8 @@ namespace Cryptography {
         ID_HASH = 0x00001100,
         ID_VAULT,
         ID_CIPHER,
-        ID_DIFFIE_HELLMAN
+        ID_DIFFIE_HELLMAN,
+        ID_PERSISTENT
     };
 
     enum aesmode {
@@ -99,6 +100,35 @@ namespace Cryptography {
         virtual uint32_t Derive(const uint32_t privateKey, const uint32_t peerPublicKeyId, uint32_t& secretId /* @out */) = 0;
     };
 
+    struct IPersistent : virtual public Core::IUnknown {
+
+    enum { ID = ID_PERSISTENT };
+
+    enum keytype {
+        AES128,
+        AES256,
+        HMAC128,
+        HMAC160,
+        HMAC256
+    };
+
+    virtual ~IPersistent() { }
+
+    //Check if a named key exists in peristent storage
+    virtual uint32_t Exists(const string& locator, bool& result /* @out */) const =0;
+
+    //Load persistent key details to vault
+    virtual uint32_t Load(const string& locator, uint32_t&  id/* @out */) = 0;
+
+    //Create a new key on persistent storage
+    virtual uint32_t Create(const string& locator, const keytype keyType, uint32_t& id/* @out */) = 0 ;
+
+    //To explicitly flush resources at the backend
+    virtual uint32_t Flush() = 0;
+
+    };
+
+
     struct IVault : virtual public Core::IUnknown {
 
         enum { ID = ID_VAULT };
@@ -138,6 +168,7 @@ namespace Cryptography {
 
         // Retrieve a Diffie-Hellman key creator
         virtual IDiffieHellman* DiffieHellman() = 0;
+
     };
 
     struct ICryptography : virtual public Core::IUnknown {
diff --git a/Source/cryptography/implementation/OpenSSL/Vault.cpp b/Source/cryptography/implementation/OpenSSL/Vault.cpp
index 296bfd5..76c7c14 100644
--- a/Source/cryptography/implementation/OpenSSL/Vault.cpp
+++ b/Source/cryptography/implementation/OpenSSL/Vault.cpp
@@ -20,6 +20,7 @@
 #include "../../Module.h"
 
 #include <vault_implementation.h>
+#include <persistent_implementation.h>
 
 #include <cryptalgo/cryptalgo.h>
 
@@ -411,4 +412,25 @@ uint32_t netflix_security_wrapping_key(void)
     return (Implementation::Vault::NetflixInstance().Size(Implementation::Netflix::KPW_ID) != 0? Implementation::Netflix::KPW_ID : 0);
 }
 
+uint32_t persistent_key_exists( struct VaultImplementation* vault ,const char locator[],bool* result)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_key_load(struct VaultImplementation* vault,const char locator[],uint32_t*  id)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_key_create( struct VaultImplementation* vault,const char locator[],const key_type keyType,uint32_t* id)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_flush(struct VaultImplementation* vault)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+
 } // extern "C"
diff --git a/Source/cryptography/implementation/SecApi/Hash.cpp b/Source/cryptography/implementation/SecApi/Hash.cpp
index e4702f6..339f8f0 100644
--- a/Source/cryptography/implementation/SecApi/Hash.cpp
+++ b/Source/cryptography/implementation/SecApi/Hash.cpp
@@ -196,6 +196,7 @@ namespace Implementation {
                     if (res != SEC_RESULT_SUCCESS) {
                         TRACE_L1(_T("SEC : SecMac_GetInstance() failed reval :%d \n"),res);
                         SecKey_Release(sec_key);
+                        sec_key =nullptr;
                         _failure = true;
                     }
                     else {
@@ -223,8 +224,9 @@ namespace Implementation {
         if (_vault_digest != nullptr) {
             delete _vault_digest;
         }
-        if (sec_key != nullptr)
+        if (sec_key != nullptr) {
             SecKey_Release(sec_key);
+        }
     }
 
     template<typename OPERATION>
diff --git a/Source/cryptography/implementation/SecApi/Vault.cpp b/Source/cryptography/implementation/SecApi/Vault.cpp
index 20f8aab..ea7611b 100644
--- a/Source/cryptography/implementation/SecApi/Vault.cpp
+++ b/Source/cryptography/implementation/SecApi/Vault.cpp
@@ -50,6 +50,15 @@ namespace Implementation {
 	
     }
 
+    /*To release sec processor resource explicitly.Before this call make sure to call Release on hmac, cipher or dh objects if used*/
+    void Vault::ProcessorRelease()
+    {
+       if (_secProcHandle != NULL) {
+            SecProcessor_Release(_secProcHandle);
+            _secProcHandle = NULL;
+        }
+    }
+
     /*********************************************************************
      * @function Size 
      *
@@ -70,14 +79,21 @@ namespace Implementation {
         if (it != _items.end()) {
             if ((allowSealed == true) || (*it).second.IsExportable() == true) {
                 IdStore* ids = const_cast<IdStore*>((*it).second.getIdStore());
-                Sec_KeyHandle* sec_key_hmac; //use either hmac or aes id to retreive key size
+                Sec_KeyHandle* sec_key_hmac; //check  hmac and  aes id to retreive key size
+                Sec_KeyHandle* sec_key_aes;
                 TRACE_L2(_T("SEC the retrieved sec obj id: %llu \n"), ids->idHmac);
-                Sec_Result sec_res = SecKey_GetInstance(_secProcHandle, ids->idHmac, &sec_key_hmac);
-                if (sec_res == SEC_RESULT_SUCCESS) {
+                Sec_Result sec_res_hmac = SecKey_GetInstance(_secProcHandle, ids->idHmac, &sec_key_hmac);
+                Sec_Result sec_res_aes = SecKey_GetInstance(_secProcHandle, ids->idAes, &sec_key_aes);
+                if (sec_res_hmac == SEC_RESULT_SUCCESS) {
                     size = SecKey_GetKeyLen(sec_key_hmac);
-                    TRACE_L2(_T("SEC:key size is %d \n"), size);
+                    TRACE_L2(_T("SEC:HMAC key size is %d \n"), size);
                     SecKey_Release(sec_key_hmac);
                 }
+                if (sec_res_aes == SEC_RESULT_SUCCESS) {
+                    size = SecKey_GetKeyLen(sec_key_aes);
+                    TRACE_L2(_T("SEC:AES key size is %d \n"), size);
+                    SecKey_Release(sec_key_aes);
+                }
             }
             else {
                 TRACE_L1(_T("SEC : blob id 0x%08x is sealed \n"), id);
@@ -107,72 +123,257 @@ namespace Implementation {
     uint32_t Vault::Import(const uint16_t size, const uint8_t blob[], bool exportable)
     {
         uint32_t id = 0;
-        if (size > 0) {
-            _lock.Lock();
-            id = (_lastHandle + 1);
-            if (id != 0) {
-                struct IdStore ids;
-                SEC_BYTE* data = (SEC_BYTE*)blob;
-                Sec_Result sec_res_hmac = SEC_RESULT_FAILURE;
-                Sec_Result sec_res_aes = SEC_RESULT_FAILURE;
-
-                if (KEYLEN_AES_HMAC_128 == size) { /* 16 byte aes or an hmac key */
-                    ids.idAes = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
-                    if (ids.idAes != 0) {
-                        sec_res_aes = SecKey_Provision(_secProcHandle, ids.idAes, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_AES_128, data, size);
-                    }
-                    ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
-                    if (ids.idHmac != 0) {
-                        sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_128, data, size);
-                    }
-                }
 
-                else if (KEYLEN_AES_HMAC_256 == size) { /* 32 byte aes or an hmac key */
-                    ids.idAes = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
-                    if (ids.idAes != 0) {
-                        sec_res_aes = SecKey_Provision(_secProcHandle, ids.idAes, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_AES_256, data, size);
-                    }
-                    ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
-                    if (ids.idHmac != 0) {
-                        sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_256, data, size);
-                    }
-                }
+        _lock.Lock();
+            if (size > 0) {
+                id = (_lastHandle + 1);
+                if (id != 0) {
+                    struct IdStore ids;
+                    SEC_BYTE* data = (SEC_BYTE*)blob;
+                    Sec_Result sec_res_hmac = SEC_RESULT_FAILURE;
+                    Sec_Result sec_res_aes = SEC_RESULT_FAILURE;
+
+                    if (KEYLEN_AES_HMAC_128 == size) { /* 16 byte aes or an hmac key */
+                        ids.idAes = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
+                        if (ids.idAes != 0) {
+                            sec_res_aes = SecKey_Provision(_secProcHandle, ids.idAes, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_AES_128, data, size);
+                        }
+                        ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
+                        if (ids.idHmac != 0) {
+                            sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_128, data, size);
+                        }
+                   }
 
-                else if (KEYLEN_HMAC_160  == size) {
-                    sec_res_aes = SEC_RESULT_SUCCESS; /* 20 byte hmac key ,no such aes key*/
-                    ids.idAes = 0;
-                    ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
-                    if (ids.idHmac != 0) {
-                        sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_160, data, size);
-                    }
-                }
+                   else if (KEYLEN_AES_HMAC_256 == size) { /* 32 byte aes or an hmac key */
+                        ids.idAes = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
+                        if (ids.idAes != 0) {
+                            sec_res_aes = SecKey_Provision(_secProcHandle, ids.idAes, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_AES_256, data, size);
+                        }
+                        ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
+                        if (ids.idHmac != 0) {
+                            sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_256, data, size);
+                        }
+                   }
+
+                   else if (KEYLEN_HMAC_160  == size) {
+                       sec_res_aes = SEC_RESULT_SUCCESS; /* 20 byte hmac key ,no such aes key*/
+                       ids.idAes = 0;
+                       ids.idHmac = SecKey_ObtainFreeObjectId(_secProcHandle, SEC_OBJECTID_USER_BASE, SEC_OBJECTID_USER_TOP);
+                       if (ids.idHmac != 0) {
+                           sec_res_hmac = SecKey_Provision(_secProcHandle, ids.idHmac, SEC_STORAGELOC_RAM, SEC_KEYCONTAINER_RAW_HMAC_160, data, size);
+                       }
+                   }
+
+                   if ((sec_res_aes == SEC_RESULT_SUCCESS) && (sec_res_hmac == SEC_RESULT_SUCCESS)) {
+                       TRACE_L2(_T("SEC : key is provisioned \n"));
+
+                       _items.emplace(std::piecewise_construct, std::forward_as_tuple(id),
+                       std::forward_as_tuple(exportable, ids, size));
+
+                       _lastHandle = id;
+                       TRACE_L2(_T("SEC : Added a %s data blob \n"), (exportable ? "clear" : "sealed"));
+                   }
+                   else if((sec_res_aes != SEC_RESULT_SUCCESS) || (sec_res_hmac != SEC_RESULT_SUCCESS))  {
+                       if (sec_res_hmac == SEC_RESULT_SUCCESS) {
+                           SecKey_Delete(_secProcHandle, ids.idHmac);
+                       }
+                       if ((sec_res_aes == SEC_RESULT_SUCCESS) && (ids.idAes != 0)) {
+                           SecKey_Delete(_secProcHandle, ids.idAes);
+                       }
+                       TRACE_L1(_T("SEC :cannot provision key, result for key provision Aes:%d and Hmac:%d "),sec_res_aes,sec_res_hmac);
+                   }
+               }
+               else {
+                   TRACE_L1(_T("SEC : id assigned is zero \n"));
+               }
+           }
+           TRACE_L2(_T("SEC : import ends the id assigned is 0x%08x \n"), id);
 
-                if ((sec_res_aes == SEC_RESULT_SUCCESS) && (sec_res_hmac == SEC_RESULT_SUCCESS)) {
-                    TRACE_L2(_T("SEC : key is provisioned \n"));
+        _lock.Unlock();
 
-                    _items.emplace(std::piecewise_construct, std::forward_as_tuple(id),
-                        std::forward_as_tuple(exportable, ids, size));
+        return(id);
 
-                    _lastHandle = id;
-                    TRACE_L2(_T("SEC : Added a %s data blob \n"), (exportable ? "clear" : "sealed"));
+    }
+
+    /*********************************************************************
+     * @function ImportNamedKey
+     *
+     * @brief   Load the persistent key details to vault
+     *
+     * @param[in] keyFile -keyfile sec object id  to be loaded
+     *
+     * @return id of vault cross which the hmac/AES object ids are stored.
+     *
+     *********************************************************************/
+    uint32_t Vault::ImportNamedKey(const char keyFile[])
+    {
+        uint32_t id = 0;
+
+        _lock.Lock();
+        SEC_OBJECTID idcheck = 0x0;
+        struct IdStore ids;
+        string kFile(keyFile);
+        string fileName = kFile.substr(0,SEC_ID_SIZE);
+        uint64_t secId  = stoull(fileName,0,16);
+        if (secId != 0 ) {
+            idcheck = secId;
+            TRACE_L2(_T("SEC: the obj id from file name is %llx \n"),idcheck);
+            Sec_KeyHandle* sec_key_check;
+            Sec_Result sec_res = SecKey_GetInstance(_secProcHandle,idcheck, &sec_key_check);
+            if( sec_res == SEC_RESULT_SUCCESS ) {
+                Sec_KeyType key_type = SecKey_GetKeyType(sec_key_check);
+                if((key_type == SEC_KEYTYPE_HMAC_256) ||(key_type == SEC_KEYTYPE_HMAC_128)||(key_type == SEC_KEYTYPE_HMAC_160)) {
+                    ids.idHmac = idcheck;
+                }
+                else if ((key_type == SEC_KEYTYPE_AES_128)||(key_type == SEC_KEYTYPE_AES_256)) {
+                    ids.idAes = idcheck;
                 }
-                else if((sec_res_aes != SEC_RESULT_SUCCESS) || (sec_res_hmac != SEC_RESULT_SUCCESS))  {
-                    if (sec_res_hmac == SEC_RESULT_SUCCESS) {
-                        SecKey_Delete(_secProcHandle, ids.idHmac);
+                else {
+                    TRACE_L1(_T("SEC:key type not supported :%d\n"),key_type);
+                    SecKey_Release(sec_key_check);
+                    _lock.Unlock();
+                    return id;
+                }
+                id = (_lastHandle + 1);
+                _items.emplace(std::piecewise_construct, std::forward_as_tuple(id),
+                               std::forward_as_tuple(false, ids,SEC_ID_SIZE));
+
+                TRACE_L2(_T("SEC: key placed at %x vault id ,sec obj id %llx \n"),id,idcheck);
+                _lastHandle = id;
+                SecKey_Release(sec_key_check);
+            }
+            else {
+                TRACE_L1(_T("SEC:key instance  not created for %llx , retVal =  %d\n"),idcheck,sec_res);
+            }
+        }
+        else {
+            TRACE_L1(_T("SEC:cannot retrieve valid sec object id from filename %s \n"),kFile.c_str());
+
+        }
+        _lock.Unlock();
+
+        return(id);
+    }
+
+    /*********************************************************************
+     * @function CheckNamedKey
+     *
+     * @brief   Check if a persistently stored key exists
+     *
+     * @param[in] keyFile -keyfile to be checked
+     *
+     * @return ret status -true/false if the key exists
+     *
+     *********************************************************************/
+
+    bool Vault::CheckNamedKey(const char keyFile[])
+    {
+        bool ret =false;
+
+        _lock.Lock();
+        SEC_OBJECTID idcheck = 0x0;
+        string kFile(keyFile);
+        string fileName = kFile.substr(0,SEC_ID_SIZE);
+        uint64_t secId  = stoull(fileName,0,16);
+        if (secId != 0 ) {
+            idcheck = secId;
+            TRACE_L2(_T("SEC: the obj id from file name is %llx \n"),idcheck);
+            Sec_KeyHandle* sec_key_check;
+            Sec_Result sec_res = SecKey_GetInstance(_secProcHandle,idcheck, &sec_key_check);
+            if( sec_res == SEC_RESULT_SUCCESS ) {
+                SecKey_Release(sec_key_check);
+                ret =true;
+            }
+            else {
+                TRACE_L1(_T("SEC:key instance  not created for %llx , retVal =  %d\n"),idcheck,sec_res);
+            }
+        }
+        else {
+            TRACE_L1(_T("SEC:cannot retrieve valid sec object id from filename %s \n"),kFile.c_str());
+
+        }
+        _lock.Unlock();
+
+        return(ret);
+    }
+
+     /*********************************************************************
+     * @function CreateNamedKey
+     *
+     * @brief   Create a new AES/HMAC named key
+     *
+     * @param[in] keyFile -keyfile to be generated
+     * @param[in] exportable - blob expotable(true/false)
+     * @param[in] keyType -key type (AES/HMAC ,128/160/256)
+     *
+     * @return id across which the hmac/AES object ids are stored.
+     *
+     *********************************************************************/
+    uint32_t Vault::CreateNamedKey(const char keyFile[] ,bool exportable ,const key_type  keyType)
+    {
+        uint32_t id = 0;
+
+        _lock.Lock();
+        struct IdStore ids;
+        Sec_KeyType key = SEC_KEYTYPE_AES_128; //DEFAULT
+
+        switch(keyType) {
+            case key_type::AES128 :
+                key = SEC_KEYTYPE_AES_128;
+                break;
+            case key_type::AES256 :
+                key = SEC_KEYTYPE_AES_256;
+                break;
+            case key_type::HMAC128 :
+                key = SEC_KEYTYPE_HMAC_128;
+                break;
+            case key_type::HMAC160 :
+                key = SEC_KEYTYPE_HMAC_160;
+                break;
+            case key_type::HMAC256 :
+                key = SEC_KEYTYPE_HMAC_256;
+                break;
+            default :
+                TRACE_L1(_T("SEC :cannot generate any other key types" ));
+                _lock.Unlock();
+                return (id);
+        }
+
+        string kFile(keyFile);
+        if(!kFile.empty() && (kFile.length() >= SEC_ID_SIZE)) {
+            string keyName = kFile.substr(0,SEC_ID_SIZE);
+            uint64_t secId = stoull(keyName,0,16);
+            if( secId != 0) {
+                TRACE_L2(_T("SEC:the key name/sec id is  %llx \n"),secId);
+                Sec_Result res = SecKey_Generate(_secProcHandle,secId,key,SEC_STORAGELOC_FILE);
+                if( res == SEC_RESULT_SUCCESS) {
+                    id = (_lastHandle + 1);
+                    if ((keyType == AES128) || (keyType == AES256)) {
+                        ids.idAes = secId;
                     }
-                    if ((sec_res_aes == SEC_RESULT_SUCCESS) && (ids.idAes != 0)) {
-                        SecKey_Delete(_secProcHandle, ids.idAes);
+                    else {
+                        ids.idHmac = secId;
                     }
-                    TRACE_L1(_T("SEC :cannot provision key, result for key provision Aes:%d and Hmac:%d "),sec_res_aes,sec_res_hmac);
+                    _items.emplace(std::piecewise_construct, std::forward_as_tuple(id),
+                                   std::forward_as_tuple(exportable, ids, SEC_ID_SIZE));
+                    TRACE_L2(_T("SEC: new  key placed at %x vault id ,sec obj id %llx \n"),id,secId);
+                    _lastHandle = id;
+                }
+                else {
+                    TRACE_L1(_T("SEC:new  key cannot be created for sec id %llx  ,retVal %d\n"),secId,res);
                 }
             }
             else {
-                TRACE_L1(_T("SEC : id assigned is zero \n"));
+                TRACE_L1(_T("SEC:valid sec id not retreived  from file name %s \n"),kFile.c_str());
             }
-            _lock.Unlock();
         }
-        TRACE_L2(_T("SEC : import ends the id assigned is 0x%08x \n"), id);
+        else {
+            TRACE_L1(_T("SEC:Invalid File name : %s\n"),kFile.c_str());
+        }
+
+        _lock.Unlock();
         return (id);
+
     }
 
     /*********************************************************************
@@ -198,22 +399,26 @@ namespace Implementation {
                 if (((allowSealed == true) || (*it).second.IsExportable() == true) && ((*it).second.KeyLength() != 0)) {
                     IdStore* ids = const_cast<IdStore*>((*it).second.getIdStore());
                     uint16_t keyLength = (*it).second.KeyLength();
-                    Sec_Result sec_res = SEC_RESULT_FAILURE;
+                    Sec_Result sec_res_hmac = SEC_RESULT_FAILURE;
+                    Sec_Result sec_res_aes = SEC_RESULT_FAILURE;
                     Sec_KeyHandle* sec_key_hmac;
                     Sec_KeyHandle* sec_key_aes;
                     if ((KEYLEN_HMAC_160 == keyLength) || (KEYLEN_AES_HMAC_128 == keyLength) || (KEYLEN_AES_HMAC_256 == keyLength)) {
-                        sec_res = SecKey_GetInstance(_secProcHandle, ids->idHmac, &sec_key_hmac);
-                        ASSERT(sec_res == SEC_RESULT_SUCCESS);
-                        outSize = SecKey_GetKeyLen(sec_key_hmac);
-                        ASSERT(outSize == keyLength);
-                        if ((KEYLEN_AES_HMAC_128 == keyLength) || (KEYLEN_AES_HMAC_256 == keyLength)) {
-                            sec_res = SecKey_GetInstance(_secProcHandle, ids->idAes, &sec_key_aes);
-                            ASSERT(sec_res == SEC_RESULT_SUCCESS);
+                        sec_res_hmac = SecKey_GetInstance(_secProcHandle, ids->idHmac, &sec_key_hmac);
+                        sec_res_aes = SecKey_GetInstance(_secProcHandle, ids->idAes, &sec_key_aes);
+                        if(sec_res_hmac == SEC_RESULT_SUCCESS) {
+                            outSize = SecKey_GetKeyLen(sec_key_hmac);
+                            TRACE_L2(_T("SEC:export HMAC key of size %d\n"),outSize);
+                            ASSERT(outSize == keyLength);
+                            SecKey_Release(sec_key_hmac);
+                        }
+                        if(sec_res_aes == SEC_RESULT_SUCCESS) {
                             outSize = SecKey_GetKeyLen(sec_key_aes);
+                            TRACE_L2(_T("SEC:export AES  key of size %d\n"),outSize);
                             ASSERT(outSize == keyLength);
                             SecKey_Release(sec_key_aes);
                         }
-                        SecKey_Release(sec_key_hmac);
+
                         memcpy(blob, &ids, sizeof(ids));
                     }
                 }
@@ -269,7 +474,6 @@ namespace Implementation {
         return (id);
     }
 
-
     /*********************************************************************
      * @function Get 
      *
@@ -348,11 +552,9 @@ namespace Implementation {
 
 } // namespace Implementation
 
-
 extern "C" {
 
     // Vault
-
     VaultImplementation* vault_instance(const cryptographyvault id)
     {
         Implementation::Vault* vault = nullptr;
@@ -365,11 +567,15 @@ extern "C" {
             Implementation::vaultId = CRYPTOGRAPHY_VAULT_NETFLIX;
             break;
         case CRYPTOGRAPHY_VAULT_DEFAULT:
-            vault = new  Implementation::Vault;
+           {
+                static Implementation::Vault instance;
+                vault = &(instance);
+
             if (vault != nullptr)
                 TRACE_L2(_T("SEC :VAULT DEFAULT CASE \n"));
             Implementation::vaultId = CRYPTOGRAPHY_VAULT_DEFAULT; //DEFAULT
             break;
+            }
         default:
             TRACE_L1(_T("SEC: Vault not supported: %d"), static_cast<uint32_t>(id));
             break;
@@ -476,5 +682,65 @@ extern "C" {
         }
     }
 
+    uint32_t persistent_key_create( struct VaultImplementation* vault,const char locator[],const key_type keyType,uint32_t* id)
+    {
+        ASSERT(vault != nullptr);
+        if (Implementation::vaultId == CRYPTOGRAPHY_VAULT_NETFLIX) {
+            //NOT IMPLEMENTED FOR SEC_NETFLIX
+            return (WPEFramework::Core::ERROR_UNAVAILABLE);
+        }
+        else {
+            TRACE_L2(_T("SEC:persistent_key_create generic\n"));
+            Implementation::Vault* vaultImpl = reinterpret_cast<Implementation::Vault*>(vault);
+            (*id) = vaultImpl->CreateNamedKey(locator,false,keyType) ; //SEC keys are not exportable
+            return (((*id)!=0)?(WPEFramework::Core::ERROR_NONE):(WPEFramework::Core::ERROR_GENERAL)) ;
+        }
+    }
+
+    uint32_t persistent_key_load(struct VaultImplementation* vault,const char locator[],uint32_t* id)
+    {
+        ASSERT(vault != nullptr);
+        if (Implementation::vaultId == CRYPTOGRAPHY_VAULT_NETFLIX) {
+            //NOT IMPLEMENTED FOR SEC_NETFLIX
+            return (WPEFramework::Core::ERROR_UNAVAILABLE);
+        }
+        else {
+            TRACE_L2(_T("SEC:persistent_key_load  generic\n"));
+            Implementation::Vault* vaultImpl = reinterpret_cast<Implementation::Vault*>(vault);
+            (*id) = vaultImpl->ImportNamedKey(locator);
+            return (((*id)!=0)?(WPEFramework::Core::ERROR_NONE):(WPEFramework::Core::ERROR_GENERAL)) ;
+        }
+
+    }
 
+    uint32_t  persistent_key_exists( struct VaultImplementation* vault ,const char locator[],bool* result)
+    {
+        ASSERT(vault != nullptr);
+        if (Implementation::vaultId == CRYPTOGRAPHY_VAULT_NETFLIX) {
+            //NOT IMPLEMENTED FOR SEC_NETFLIX
+            return (WPEFramework::Core::ERROR_UNAVAILABLE);
+        }
+        else {
+            TRACE_L2(_T("SEC:persistent_key_exists generic\n"));
+            Implementation::Vault* vaultImpl = reinterpret_cast<Implementation::Vault*>(vault);
+            (*result)= vaultImpl->CheckNamedKey(locator);
+            return (WPEFramework::Core::ERROR_NONE);
+        }
+
+    }
+
+    uint32_t persistent_flush(struct VaultImplementation* vault)
+    {
+        ASSERT(vault != nullptr);
+        if (Implementation::vaultId == CRYPTOGRAPHY_VAULT_DEFAULT) {
+            TRACE_L2(_T("SEC:persistent_flush generic\n"));
+            Implementation::Vault* vaultImpl = reinterpret_cast<Implementation::Vault*>(vault);
+            vaultImpl->ProcessorRelease();
+            return (WPEFramework::Core::ERROR_NONE);
+        }
+        else {
+            return (WPEFramework::Core::ERROR_UNAVAILABLE);
+        }
+
+    }
 } // extern "C"
diff --git a/Source/cryptography/implementation/SecApi/Vault.h b/Source/cryptography/implementation/SecApi/Vault.h
index d4b9f44..c85b1a5 100644
--- a/Source/cryptography/implementation/SecApi/Vault.h
+++ b/Source/cryptography/implementation/SecApi/Vault.h
@@ -30,9 +30,11 @@
 
 #include "../../Module.h"
 #include "cryptography_vault_ids.h"
+#include "vault_implementation.h"
+#include "persistent_implementation.h"
 
 #define globalDir "/opt/drm/"
-#define appDir "/tmp"
+#define appDir "/opt/drm/vault/"  //TODO:To get this path from client
 
 #define DH_PUBLIC_KEY_MAX    (129)
 #define KEYLEN_AES_HMAC_128  (16)
@@ -44,6 +46,7 @@
 #define KEY_PUBLIC	     (2)
 #define NFLX_DH_ALG          (5)
 #define ENC_ID           (1)        
+#define SEC_ID_SIZE          (16)
 
 namespace Implementation {
 
@@ -112,6 +115,11 @@ namespace Implementation {
         uint32_t Put(const uint16_t size, const uint8_t blob[]);
         uint16_t Get(const uint32_t id, const uint16_t size, uint8_t blob[]) const;
         bool Delete(const uint32_t id);
+        /*IPersistent APIs*/
+        uint32_t ImportNamedKey(const char keyFile[]);
+        uint32_t CreateNamedKey(const char keyFile[],bool exportable ,const key_type keyType);
+        bool CheckNamedKey(const char keyFile[]);
+        void ProcessorRelease();
 
     private:
         mutable WPEFramework::Core::CriticalSection _lock;
diff --git a/Source/cryptography/implementation/Thunder/Vault.cpp b/Source/cryptography/implementation/Thunder/Vault.cpp
index 5e57974..086a379 100644
--- a/Source/cryptography/implementation/Thunder/Vault.cpp
+++ b/Source/cryptography/implementation/Thunder/Vault.cpp
@@ -21,6 +21,7 @@
 
 #include <ICryptographic.h>
 #include <vault_implementation.h>
+#include <persistent_implementation.h>
 
 #include <core/core.h>
 #include <cryptalgo/cryptalgo.h>
@@ -239,4 +240,24 @@ bool vault_clear(const uint32_t id)
     return (Implementation::Vault::Instance().Dispose(id));
 }
 
+uint32_t persistent_key_exists( struct VaultImplementation* vault ,const char locator[],bool* result)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_key_load(struct VaultImplementation* vault,const char  locator[],uint32_t*  id)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_key_create( struct VaultImplementation* vault,const char locator[],const key_type keyType,uint32_t* id)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
+uint32_t persistent_flush(struct VaultImplementation* vault)
+{
+    return(WPEFramework::Core::ERROR_UNAVAILABLE);
+}
+
 } // extern "C"
diff --git a/Source/cryptography/implementation/persistent_implementation.h b/Source/cryptography/implementation/persistent_implementation.h
new file mode 100644
index 0000000..89197d1
--- /dev/null
+++ b/Source/cryptography/implementation/persistent_implementation.h
@@ -0,0 +1,51 @@
+/*
+ * If not stated otherwise in this file or this component's LICENSE file the
+ * following copyright and licenses apply:
+ *
+ * Copyright 2020 RDK Management
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include <stdint.h>
+#include <stdbool.h>
+#include "cryptography_vault_ids.h"
+#include "vault_implementation.h" 
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef enum {
+        AES128,
+        AES256,
+        HMAC128,
+        HMAC160,
+        HMAC256
+}key_type;
+
+uint32_t persistent_key_exists( struct VaultImplementation* vault ,const char locator[],bool* result);
+
+uint32_t persistent_key_load(struct VaultImplementation* vault,const char locator[],uint32_t*  id);
+
+uint32_t persistent_key_create( struct VaultImplementation* vault,const char locator[],const key_type keyType,uint32_t* id);
+
+uint32_t persistent_flush(struct VaultImplementation* vault);
+
+
+#ifdef __cplusplus
+} // extern "C"
+#endif
+
-- 
2.24.0

