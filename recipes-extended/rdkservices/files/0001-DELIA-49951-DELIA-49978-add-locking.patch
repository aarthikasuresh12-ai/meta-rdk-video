From 5ebee5a67b820e91ee17f883a6ad96e7d5e149c1 Mon Sep 17 00:00:00 2001
From: Nikita Poltorapavlo <Nikita_Poltorapavlo2@cable.comcast.com>
Date: Wed, 21 Jul 2021 11:47:02 -0400
Subject: [PATCH] DELIA-49951-DELIA-49978-add-locking
Source: COMCAST
License: GPLV2
Upstream-Status: Pending

Reason for change: temporary solution for multiprocess
access to Core::IPCChannelClientType.
Test Procedure: Multiple processes should get token
in parallel.
Risks: Low
Signed-off-by: Nikita Poltorapavlo <npoltorapavlo@productengine.com>

---
 Source/securityagent/CMakeLists.txt |  1 +
 Source/securityagent/filelock.cpp   | 51 +++++++++++++++++++++++++++++
 Source/securityagent/filelock.h     | 49 +++++++++++++++++++++++++++
 Source/securityagent/ipclink.cpp    |  7 ++--
 4 files changed, 105 insertions(+), 3 deletions(-)
 create mode 100644 Source/securityagent/filelock.cpp
 create mode 100644 Source/securityagent/filelock.h

diff --git a/Source/securityagent/CMakeLists.txt b/Source/securityagent/CMakeLists.txt
index fe4f217..f4bd40d 100644
--- a/Source/securityagent/CMakeLists.txt
+++ b/Source/securityagent/CMakeLists.txt
@@ -21,6 +21,7 @@ set(TARGET securityagent)
 add_library(${TARGET} SHARED
         ipclink.cpp
         Module.cpp
+        filelock.cpp
         )
 
 set(PUBLIC_HEADERS
diff --git a/Source/securityagent/filelock.cpp b/Source/securityagent/filelock.cpp
new file mode 100644
index 0000000..2af9765
--- /dev/null
+++ b/Source/securityagent/filelock.cpp
@@ -0,0 +1,51 @@
+/*
+ * If not stated otherwise in this file or this component's LICENSE file the
+ * following copyright and licenses apply:
+ *
+ * Copyright 2020 RDK Management
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "filelock.h"
+
+#include <sys/file.h>
+#include <unistd.h>
+
+FileLock::Lock::Lock(FileLock* sem)
+    : ptr(sem)
+    , locked(false) {
+    locked = ptr->Wait();
+}
+
+FileLock::Lock::~Lock() {
+    if (locked) {
+        ptr->Unlock();
+    }
+}
+
+FileLock::FileLock(const char* name) {
+    fd_lock = open(name, O_CREAT, S_IRUSR | S_IWUSR);
+}
+
+FileLock::~FileLock() {
+    close(fd_lock);
+}
+
+bool FileLock::Wait() {
+    return (flock(fd_lock, LOCK_EX) == 0);
+}
+
+bool FileLock::Unlock() {
+    return (flock(fd_lock, LOCK_UN) == 0);
+}
diff --git a/Source/securityagent/filelock.h b/Source/securityagent/filelock.h
new file mode 100644
index 0000000..e7035dc
--- /dev/null
+++ b/Source/securityagent/filelock.h
@@ -0,0 +1,49 @@
+/*
+ * If not stated otherwise in this file or this component's LICENSE file the
+ * following copyright and licenses apply:
+ *
+ * Copyright 2020 RDK Management
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef FILE_LOCK_H
+#define FILE_LOCK_H
+
+class FileLock {
+public:
+    class Lock {
+    public:
+        Lock() = delete;
+        Lock(const Lock &) = delete;
+        Lock &operator=(const Lock &) = delete;
+        Lock(FileLock *sem);
+        ~Lock();
+    private:
+        FileLock *ptr;
+        bool locked;
+    };
+
+    FileLock() = delete;
+    FileLock(const FileLock &) = delete;
+    FileLock &operator=(const FileLock &) = delete;
+    FileLock(const char* name);
+    ~FileLock();
+    bool Wait();
+    bool Unlock();
+
+private:
+    int fd_lock;
+};
+
+#endif //FILE_LOCK_H
diff --git a/Source/securityagent/ipclink.cpp b/Source/securityagent/ipclink.cpp
index a9bad74..08d73fe 100644
--- a/Source/securityagent/ipclink.cpp
+++ b/Source/securityagent/ipclink.cpp
@@ -20,7 +20,8 @@
 #include "IPCSecurityToken.h"
 #include "securityagent.h"
 
-#include <mutex>
+// temporary solution for multiprocess
+#include "filelock.h"
 
 using namespace WPEFramework;
 
@@ -57,8 +58,8 @@ Core::ProxyPoolType<IPC::SecurityAgent::TokenData> _tokens(1);
  */
 int GetToken(unsigned short maxLength, unsigned short inLength, unsigned char buffer[])
 {
-    static std::mutex mtx;
-    std::unique_lock<std::mutex> lock(mtx);
+    FileLock fileLock("/tmp/.securityagent.lock");
+    FileLock::Lock lock(&fileLock);
 
     Core::IPCChannelClientType<Core::Void, false, true> channel(Core::NodeId(GetEndPoint().c_str()), 2048);
     int result = -1;
-- 
2.17.1

