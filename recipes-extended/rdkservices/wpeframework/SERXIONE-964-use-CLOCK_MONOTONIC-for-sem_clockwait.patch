From 7d353005b4bb4e9d1cccf2e63126a609b3c890d8 Mon Sep 17 00:00:00 2001
From: Zameerun Rasheed M S <ZameerunRasheed_MamoonSyed@comcast.com>
Date: Thu, 22 Sep 2022 10:39:45 +0000
Subject: [PATCH] SERXIONE-964: use CLOCK_MONOTONIC for sem_clockwait

Reason for change: use CLOCK_MONOTONIC for sem_clockwait

Test Procedure: Build and verify.
Risks: low
Signed-off-by:Zameerun Rasheed M S <zmamoo711@cable.comcast.com>
---
 Source/core/SharedBuffer.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/Source/core/SharedBuffer.cpp b/Source/core/SharedBuffer.cpp
index 35ec96112..61b958efd 100644
--- a/Source/core/SharedBuffer.cpp
+++ b/Source/core/SharedBuffer.cpp
@@ -103,7 +103,11 @@ namespace Core {
 
         struct timespec structTime;
 
+#if (__GLIBC__ >= 2) && (__GLIBC_MINOR__ > 30)
+        clock_gettime(CLOCK_MONOTONIC, &structTime);
+#else
         clock_gettime(CLOCK_REALTIME, &structTime);
+#endif
         structTime.tv_nsec += ((waitTime % 1000) * 1000 * 1000); /* remainder, milliseconds to nanoseconds */
         structTime.tv_sec += (waitTime / 1000) + (structTime.tv_nsec / 1000000000); /* milliseconds to seconds */
         structTime.tv_nsec = structTime.tv_nsec % 1000000000;
@@ -111,7 +115,11 @@ namespace Core {
         // MF2018 please note: sem_timedwait is not compatible with CLOCK_MONOTONIC.
         //                     When used with CLOCK_REALTIME do not use this when the system time can make large jumps (so when Time subsystem is not yet up)
         do {
+#if (__GLIBC__ >= 2) && (__GLIBC_MINOR__ > 30)
+            if (sem_clockwait(_semaphore, CLOCK_MONOTONIC, &structTime) == 0) {
+#else
             if (sem_timedwait(_semaphore, &structTime) == 0) {
+#endif
                 result = Core::ERROR_NONE;
             }
             else if ( errno == EINTR ) {