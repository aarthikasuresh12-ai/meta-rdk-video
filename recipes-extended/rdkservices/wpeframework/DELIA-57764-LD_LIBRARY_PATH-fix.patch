diff --git a/Source/WPEProcess/Process.cpp b/Source/WPEProcess/Process.cpp
index 8b7df6d2..26918859 100644
--- a/Source/WPEProcess/Process.cpp
+++ b/Source/WPEProcess/Process.cpp
@@ -170,7 +170,7 @@ namespace Process {
     class ConsoleOptions : public Core::Options {
     public:
         ConsoleOptions(int argumentCount, TCHAR* arguments[])
-            : Core::Options(argumentCount, arguments, _T("h:l:c:C:r:p:s:d:a:m:i:u:g:t:e:x:V:v:P:L:"))
+            : Core::Options(argumentCount, arguments, _T("h:l:c:C:r:p:s:d:a:m:i:u:g:t:e:x:V:v:P:"))
             , Locator(nullptr)
             , ClassName(nullptr)
             , Callsign(nullptr)
@@ -185,7 +185,6 @@ namespace Process {
             , AppPath()
             , ProxyStubPath()
             , PostMortemPath()
-            , LinkLoaderPath()
             , User(nullptr)
             , Group(nullptr)
             , Threads(1)
@@ -212,7 +211,6 @@ namespace Process {
         string AppPath;
         string ProxyStubPath;
         string PostMortemPath;
-        string LinkLoaderPath;
         const TCHAR* User;
         const TCHAR* Group;
         uint8_t Threads;
@@ -267,9 +265,6 @@ namespace Process {
             case 'm':
                 ProxyStubPath = Strip(argument);
                 break;
-            case 'L':
-                LinkLoaderPath = Strip(argument);
-                break;
             case 'u':
                 User = argument;
                 break;
@@ -582,7 +577,6 @@ int main(int argc, char** argv)
         printf("        [-m <proxy stub library path>]\n");
         printf("        [-e <enabled SYSLOG categories>]\n");
         printf("        [-P <post mortem path>]\n");
-        printf("        [-L <dynamic linker search path>]\n\n");
         printf("This application spawns a seperate process space for a plugin. The plugins");
         printf("are searched in the same order as they are done in process. Starting from:\n");
         printf(" 1) <persistent path>/<locator>\n");
@@ -621,18 +615,6 @@ int main(int argc, char** argv)
             NULL, true, -1);
         #endif
 
-        if (options.LinkLoaderPath.empty() == false) {
-            string path;
-
-            // Seems like a LD_LIBRARY_PATH has been passsed to us...
-            if (Core::SystemInfo::GetEnvironment(_T("LD_LIBRARY_PATH"), path) == false) {
-                Core::SystemInfo::SetEnvironment(_T("LD_LIBRARY_PATH"), options.LinkLoaderPath, true);
-            }
-            else {
-                Core::SystemInfo::SetEnvironment(_T("LD_LIBRARY_PATH"), options.LinkLoaderPath + ':' + path, true);
-            }
-        }
-
         Process::ProcessFlow process;
 
         Core::NodeId remoteNode(options.RemoteChannel);
diff --git a/Source/com/Communicator.cpp b/Source/com/Communicator.cpp
index c6b79804..63f07396 100644
--- a/Source/com/Communicator.cpp
+++ b/Source/com/Communicator.cpp
@@ -33,6 +33,8 @@ namespace RPC {
 
     static Core::ProxyPoolType<RPC::AnnounceMessage> AnnounceMessageFactory(2);
 
+    /* static */ Core::CriticalSection Process::_ldLibLock ;
+
     class ProcessShutdown {
     public:
         static constexpr uint32_t DestructionStackSize = 64 * 1024;
diff --git a/Source/com/Communicator.h b/Source/com/Communicator.h
index be16c8b6..d960718f 100644
--- a/Source/com/Communicator.h
+++ b/Source/com/Communicator.h
@@ -22,11 +22,11 @@
 
 #include <atomic>
 #include "Module.h"
-#include "Ids.h"
 #include "Administrator.h"
-#include "IUnknown.h"
 #include "ICOM.h"
 #include "ITrace.h"
+#include "IUnknown.h"
+#include "Ids.h"
 
 #ifdef PROCESSCONTAINERS_ENABLED
 #include "../processcontainers/ProcessContainer.h"
@@ -290,7 +290,6 @@ namespace RPC {
             return (_postMortem);
         }
 
-
     private:
         string _connector;
         string _hostApplication;
@@ -310,7 +310,6 @@ namespace RPC {

         Process(const uint32_t sequenceNumber, const Config& config, const Object& instance)
             : _options(config.HostApplication())
-            , _adminLock()
         {
             ASSERT(instance.Locator().empty() == false);
             ASSERT(instance.ClassName().empty() == false);
@@ -323,7 +322,7 @@ namespace RPC {
             _options.Add(_T("-r")).Add(config.Connector());
             _options.Add(_T("-i")).Add(Core::NumberType<uint32_t>(instance.Interface()).Text());
             _options.Add(_T("-x")).Add(Core::NumberType<uint32_t>(sequenceNumber).Text());
-            
+
             if (instance.Version() != static_cast<uint32_t>(~0)) {
                 _options.Add(_T("-V")).Add(Core::NumberType<uint32_t>(instance.Version()).Text());
             }
@@ -355,13 +354,11 @@ namespace RPC {
                 _options.Add(_T("-P")).Add('"' + config.PostMortemPath() + '"');
             }
             if (instance.LinkLoaderPath().empty() == false) {
-                _options.Add(_T("-L")).Add('"' + instance.LinkLoaderPath() + '"');
                 _linkLoaderPath = instance.LinkLoaderPath();
             }
             if (instance.Threads() > 1) {
                 _options.Add(_T("-t")).Add(Core::NumberType<uint8_t>(instance.Threads()).Text());
             }
-
             _priority = instance.Priority();
         }
         const string& Command() const
@@ -374,7 +371,7 @@ namespace RPC {
         }
         uint32_t Launch(uint32_t& id)
         {
-            uint32_t loggingSettings =
+             uint32_t loggingSettings =
                     (Logging::LoggingType<Logging::Startup>::IsEnabled() ? 0x01 : 0) |
                     (Logging::LoggingType<Logging::Shutdown>::IsEnabled() ? 0x02 : 0) |
                     (Logging::LoggingType<Logging::Notification>::IsEnabled() ? 0x04 : 0) |
@@ -384,12 +381,12 @@ namespace RPC {
                     (Logging::LoggingType<Logging::Fatal>::IsEnabled() ? 0x40 : 0);
             _options.Add(_T("-e")).Add(Core::NumberType<uint32_t>(loggingSettings).Text());
 
-            _adminLock.Lock();
-
             string oldPath;
-            if (_linkLoaderPath.empty() == 0) {
+
+            _ldLibLock.Lock();
+            if (_linkLoaderPath.empty() == false) {
                 Core::SystemInfo::GetEnvironment(_T("LD_LIBRARY_PATH"), oldPath);
-                string newPath = oldPath + ":" + _linkLoaderPath;
+                string newPath = _linkLoaderPath+':'+oldPath ;
                 Core::SystemInfo::SetEnvironment(_T("LD_LIBRARY_PATH"), newPath, true);
             }
 
@@ -399,9 +396,12 @@ namespace RPC {
             uint32_t result = fork.Launch(_options, &id);
 
             //restore the original value
-            Core::SystemInfo::SetEnvironment(_T("LD_LIBRARY_PATH"), oldPath, true);
+            if (_linkLoaderPath.empty() == false) {
+                Core::SystemInfo::SetEnvironment(_T("LD_LIBRARY_PATH"), oldPath, true);
+            }
+
+            _ldLibLock.Unlock();
 
-            _adminLock.Unlock();
 
             if ((result == Core::ERROR_NONE) && (_priority != 0)) {
                 Core::ProcessInfo newProcess(id);
@@ -415,7 +415,8 @@ namespace RPC {
         Core::Process::Options _options;
         int8_t _priority;
         string _linkLoaderPath;
-        mutable Core::CriticalSection _adminLock;
+        static  Core::CriticalSection _ldLibLock;
+
     };
 
     struct EXTERNAL IMonitorableProcess : public virtual Core::IUnknown {
@@ -502,7 +503,7 @@ namespace RPC {
             }
 
             BEGIN_INTERFACE_MAP(RemoteConnection)
-                INTERFACE_ENTRY(IRemoteConnection)
+            INTERFACE_ENTRY(IRemoteConnection)
             END_INTERFACE_MAP
 
         private:
@@ -553,8 +554,8 @@ namespace RPC {
 
         private:
             BEGIN_INTERFACE_MAP(LocalProcess)
-                INTERFACE_ENTRY(IRemoteConnection)
-                INTERFACE_ENTRY(IMonitorableProcess)
+            INTERFACE_ENTRY(IRemoteConnection)
+            INTERFACE_ENTRY(IMonitorableProcess)
             END_INTERFACE_MAP
 
             void Terminate() override;
@@ -567,7 +568,7 @@ namespace RPC {
         };
 #ifdef PROCESSCONTAINERS_ENABLED
 
-        class EXTERNAL ContainerProcess  : public RemoteConnection, public IMonitorableProcess {
+        class EXTERNAL ContainerProcess : public RemoteConnection, public IMonitorableProcess {
         private:
             class ContainerConfig : public Core::JSON::Container {
             public:
@@ -654,8 +655,8 @@ namespace RPC {
                     Core::IteratorType<std::vector<string>, const string> temp(params);
                     if (_container->Start(_process.Command(), temp) == true) {
                         result = Core::ERROR_NONE;
-                    } 
-                } 
+                    }
+                }
 
                 return result;
             }
@@ -663,8 +664,8 @@ namespace RPC {
 
         private:
             BEGIN_INTERFACE_MAP(ContainerProcess)
-                INTERFACE_ENTRY(IRemoteConnection)
-                INTERFACE_ENTRY(IMonitorableProcess)
+            INTERFACE_ENTRY(IRemoteConnection)
+            INTERFACE_ENTRY(IMonitorableProcess)
             END_INTERFACE_MAP
             void Terminate() override;
 
@@ -689,8 +690,7 @@ namespace RPC {
 
             if (instance.Type() == Object::HostType::LOCAL) {
                 result = Core::Service<LocalProcess>::Create<RemoteConnection>(config, instance);
-            }
-            else if (instance.Type() == Object::HostType::CONTAINER) {
+            } else if (instance.Type() == Object::HostType::CONTAINER) {
 #ifdef PROCESSCONTAINERS_ENABLED
                 result = Core::Service<ContainerProcess>::Create<RemoteConnection>(config, instance);
 #else
@@ -709,20 +709,23 @@ namespace RPC {
 
             class Info {
             public:
-                Info () = delete;
-                Info (const Info&) = delete;
-                Info (Core::Event& event, const uint32_t id) 
-                    : _event(event) 
+                Info() = delete;
+                Info(const Info&) = delete;
+                Info(Core::Event& event, const uint32_t id)
+                    : _event(event)
                     , _id(id)
-                    , _interface(nullptr) {
+                    , _interface(nullptr)
+                {
                 }
-                ~Info() {
+                ~Info()
+                {
                 }
 
             public:
-                inline void Implementation(const Core::ProxyType<Core::IPCChannel>& channel, const instance_id& implementation) {
+                inline void Implementation(const Core::ProxyType<Core::IPCChannel>& channel, const instance_id& implementation)
+                {
 
-                    ASSERT (_interface == nullptr);
+                    ASSERT(_interface == nullptr);
 
                     // Get the interface pointer that was stored during the triggering of the event...
                     // It is reference counted so it has to be dereferenced by the caller.
@@ -730,7 +733,8 @@ namespace RPC {
 
                     _event.SetEvent();
                 }
-                inline void* Interface() {
+                inline void* Interface()
+                {
                     return (_interface);
                 }
 
@@ -1588,3 +1592,4 @@ namespace RPC {
 }
 
 #endif // __COM_PROCESSLAUNCH_H
+
