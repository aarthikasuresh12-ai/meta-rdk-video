From ebaf5949d49198d00df83de6e2afd0224ae387f7 Mon Sep 17 00:00:00 2001
From: Stephen Foulds <stephen.foulds@sky.uk>
Date: Thu, 17 Mar 2022 11:24:08 +0000
Subject: [PATCH 1/4] RDKTV-15395: Wait for container to stop

Reason for change: Dobby Stop() command is async. Thunder
should wait for the container stop event before marking the container
as stopped

Test Procedure: See JIRA
Risks: Low
Source: COMCAST
License: Apache-2.0
Upstream-Status: Pending
Signed-off-by: Stephen Foulds <stephen.foulds@sky.uk>
---
 .../DobbyImplementation.cpp                   | 85 +++++++++++++------
 .../DobbyImplementation/DobbyImplementation.h | 14 ++-
 2 files changed, 68 insertions(+), 31 deletions(-)

diff --git a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
index 7219922c4..6d19e5057 100644
--- a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
+++ b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
@@ -18,10 +18,10 @@
  */
 
 #include "DobbyImplementation.h"
-#include <thread>
-#include <Dobby/IpcService/IpcFactory.h>
 #include <Dobby/DobbyProxy.h>
+#include <Dobby/IpcService/IpcFactory.h>
 #include <fstream>
+#include <thread>
 
 namespace WPEFramework {
 
@@ -43,6 +43,7 @@ namespace ProcessContainers {
 
             Core::File configFile(path + "/Container" + CONFIG_NAME);
             TRACE_L1("searching %s container at %s", id.c_str(), configFile.Name().c_str());
+
             if (configFile.Exists()) {
                 TRACE_L1("Found %s container!", id.c_str());
                 // Make sure no leftover will interfere...
@@ -58,21 +59,20 @@ namespace ProcessContainers {
             }
         }
 
+        TRACE_L1("Could not find suitable container config for %s in any search path", id.c_str());
+
         return nullptr;
     }
 
     DobbyContainerAdministrator::DobbyContainerAdministrator()
         : BaseAdministrator()
     {
-        mIpcService = AI_IPC::createIpcService("unix:path=/var/run/dbus/system_bus_socket", "com.sky.dobby.processcontainers");
+        mIpcService = AI_IPC::createIpcService("unix:path=/var/run/dbus/system_bus_socket", "org.rdk.dobby.processcontainers");
 
-        if (!mIpcService)
-        {
+        if (!mIpcService) {
             TRACE_L1("Failed to create IPC service");
             return;
-        }
-        else
-        {
+        } else {
             // Start the IPCService which kicks off the event dispatcher thread
             mIpcService->start();
         }
@@ -97,17 +97,39 @@ namespace ProcessContainers {
         std::list<std::pair<int32_t, std::string>> runningContainers;
         runningContainers = mDobbyProxy->listContainers();
 
-        if (!runningContainers.empty())
-        {
-            for (const std::pair<int32_t, std::string>& c : runningContainers)
-            {
-                if(c.second == name){
+        if (!runningContainers.empty()) {
+            for (const std::pair<int32_t, std::string>& c : runningContainers) {
+                if (c.second == name) {
                     // found the container, now try stopping it...
                     TRACE_L1("destroying container: %s ", name.c_str());
+
+                    // Dobby stop is async - block until we get the notification the container
+                    // has actually stopped
+                    this->InternalLock();
+
+                    _stopPromise = std::promise<void>();
+                    const void* vp = static_cast<void*>(new std::string(name));
+                    int listenerId = mDobbyProxy->registerListener(std::bind(&DobbyContainerAdministrator::containerStopCallback, this,
+                                                                       std::placeholders::_1,
+                                                                       std::placeholders::_2,
+                                                                       std::placeholders::_3,
+                                                                       std::placeholders::_4), vp);
+
+                    std::future<void> future = _stopPromise.get_future();
                     bool stoppedSuccessfully = mDobbyProxy->stopContainer(c.first, true);
                     if (!stoppedSuccessfully) {
                         TRACE_L1("Failed to destroy container, internal Dobby error. id: %s descriptor: %d", name.c_str(), c.first);
                     }
+                    else
+                    {
+                        // Block here until container has stopped
+                        future.wait();
+                    }
+
+                    this->InternalUnlock();
+
+                    // Always make sure we unregister our callback
+                    mDobbyProxy->unregisterListener(listenerId);
 
                     break;
                 }
@@ -124,11 +146,9 @@ namespace ProcessContainers {
         runningContainers = mDobbyProxy->listContainers();
 
         // Build the response if containers were found
-        if (!runningContainers.empty())
-        {
-            for (const std::pair<int32_t, std::string>& c : runningContainers)
-            {
-                if(c.second == name){
+        if (!runningContainers.empty()) {
+            for (const std::pair<int32_t, std::string>& c : runningContainers) {
+                if (c.second == name) {
                     TRACE_L1("container %s already running...", name.c_str());
                     result = true;
                     break;
@@ -139,6 +159,21 @@ namespace ProcessContainers {
         return result;
     }
 
+    void DobbyContainerAdministrator::containerStopCallback(int32_t cd, const std::string& containerId,
+                                                            IDobbyProxyEvents::ContainerState state,
+                                                            const void* params)
+    {
+        const std::string* id = static_cast<const std::string*>(params);
+
+        // Interested in stop events only
+        if (state == IDobbyProxyEvents::ContainerState::Stopped && containerId == *id) {
+            TRACE_L1("Container %s has stopped", containerId.c_str());
+            this->InternalLock();
+            _stopPromise.set_value();
+            this->InternalUnlock();
+        }
+    }
+
     // Container
     // ------------------------------------
     DobbyContainer::DobbyContainer(const string& name, const string& path, const string& logPath)
@@ -255,8 +290,7 @@ namespace ProcessContainers {
         auto& admin = static_cast<DobbyContainerAdministrator&>(DobbyContainerAdministrator::Instance());
 
         // We got a state back successfully, work out what that means in English
-        switch (static_cast<IDobbyProxyEvents::ContainerState>(admin.mDobbyProxy->getContainerState(_descriptor)))
-        {
+        switch (static_cast<IDobbyProxyEvents::ContainerState>(admin.mDobbyProxy->getContainerState(_descriptor))) {
         case IDobbyProxyEvents::ContainerState::Invalid:
             result = false;
             break;
@@ -298,13 +332,11 @@ namespace ProcessContainers {
 
         _descriptor = admin.mDobbyProxy->startContainerFromBundle(_name, _path, emptyList, fullCommand);
 
-
         // startContainer returns -1 on failure
-        if (_descriptor <= 0)
-        {
+        if (_descriptor <= 0) {
             TRACE_L1("Failed to start container - internal Dobby error.");
             result = false;
-        }else{
+        } else {
             TRACE_L1("started %s container! descriptor: %d", _name.c_str(), _descriptor);
             result = true;
         }
@@ -319,10 +351,9 @@ namespace ProcessContainers {
 
         bool stoppedSuccessfully = admin.mDobbyProxy->stopContainer(_descriptor, false);
 
-        if (!stoppedSuccessfully)
-        {
+        if (!stoppedSuccessfully) {
             TRACE_L1("Failed to stop container, internal Dobby error. id: %s descriptor: %d", _name.c_str(), _descriptor);
-        }else{
+        } else {
             result = true;
         }
 
diff --git a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
index b224694d9..a0ba25e2a 100644
--- a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
+++ b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
@@ -26,8 +26,10 @@
 #include "processcontainers/common/Lockable.h"
 #include "processcontainers/common/NetworkInfoUnimplemented.h"
 
-#include <Dobby/Public/Dobby/IDobbyProxy.h>
 #include <Dobby/DobbyProtocol.h>
+#include <Dobby/Public/Dobby/IDobbyProxy.h>
+
+#include <future>
 
 namespace WPEFramework {
 namespace ProcessContainers {
@@ -59,7 +61,7 @@ namespace ProcessContainers {
         string _name;
         string _path;
         string _logPath;
-        int    _descriptor;
+        int _descriptor;
         mutable Core::OptionalType<uint32_t> _pid;
     };
 
@@ -72,7 +74,6 @@ namespace ProcessContainers {
         DobbyContainerAdministrator(const DobbyContainerAdministrator&) = delete;
         DobbyContainerAdministrator& operator=(const DobbyContainerAdministrator&) = delete;
 
-
         std::shared_ptr<AI_IPC::IIpcService> mIpcService; // Ipc Service instance
         std::shared_ptr<IDobbyProxy> mDobbyProxy; // DobbyProxy instance
     public:
@@ -87,9 +88,14 @@ namespace ProcessContainers {
         void Logging(const string& logDir, const string& loggingOptions) override;
 
     protected:
-
         void DestroyContainer(const string& name); // make sure that no leftovers from previous launch will cause crash
         bool ContainerNameTaken(const string& name);
+        void containerStopCallback(int32_t cd, const std::string& containerId,
+            IDobbyProxyEvents::ContainerState state,
+            const void* params);
+
+    private:
+        std::promise<void> _stopPromise;
     };
 }
 }

From 8f1e3dd065e29ff917f5ac82d885ac6056be86af Mon Sep 17 00:00:00 2001
From: Stephen Foulds <stephen.foulds@sky.uk>
Date: Thu, 17 Mar 2022 12:23:39 +0000
Subject: [PATCH 2/4] Move away from TRACE_L1

---
 .../DobbyImplementation.cpp                   | 26 +++++++++----------
 .../DobbyImplementation/DobbyImplementation.h |  2 ++
 2 files changed, 15 insertions(+), 13 deletions(-)

diff --git a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
index 6d19e5057..61675a21b 100644
--- a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
+++ b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
@@ -42,10 +42,10 @@ namespace ProcessContainers {
             auto path = searchpaths.Current();
 
             Core::File configFile(path + "/Container" + CONFIG_NAME);
-            TRACE_L1("searching %s container at %s", id.c_str(), configFile.Name().c_str());
+            TRACE(ProcessContainers::ProcessContainerization, (_T("searching %s container at %s"), id.c_str(), configFile.Name().c_str()));
 
             if (configFile.Exists()) {
-                TRACE_L1("Found %s container!", id.c_str());
+                TRACE(ProcessContainers::ProcessContainerization, (_T("Found %s container!"), id.c_str()));
                 // Make sure no leftover will interfere...
                 if (ContainerNameTaken(id)) {
                     DestroyContainer(id);
@@ -59,7 +59,7 @@ namespace ProcessContainers {
             }
         }
 
-        TRACE_L1("Could not find suitable container config for %s in any search path", id.c_str());
+        TRACE(Trace::Error, (_T("Could not find suitable container config for %s in any search path"), id.c_str()));
 
         return nullptr;
     }
@@ -70,7 +70,7 @@ namespace ProcessContainers {
         mIpcService = AI_IPC::createIpcService("unix:path=/var/run/dbus/system_bus_socket", "org.rdk.dobby.processcontainers");
 
         if (!mIpcService) {
-            TRACE_L1("Failed to create IPC service");
+            TRACE(Trace::Error, (_T("Failed to create Dobby IPC service")));
             return;
         } else {
             // Start the IPCService which kicks off the event dispatcher thread
@@ -101,7 +101,7 @@ namespace ProcessContainers {
             for (const std::pair<int32_t, std::string>& c : runningContainers) {
                 if (c.second == name) {
                     // found the container, now try stopping it...
-                    TRACE_L1("destroying container: %s ", name.c_str());
+                    TRACE(ProcessContainers::ProcessContainerization, (_T("destroying container: %s "), name.c_str()));
 
                     // Dobby stop is async - block until we get the notification the container
                     // has actually stopped
@@ -118,12 +118,13 @@ namespace ProcessContainers {
                     std::future<void> future = _stopPromise.get_future();
                     bool stoppedSuccessfully = mDobbyProxy->stopContainer(c.first, true);
                     if (!stoppedSuccessfully) {
-                        TRACE_L1("Failed to destroy container, internal Dobby error. id: %s descriptor: %d", name.c_str(), c.first);
+                        TRACE(Trace::Warning, (_T("Failed to destroy container, internal Dobby error. id: %s descriptor: %d"), name.c_str(), c.first));
                     }
                     else
                     {
                         // Block here until container has stopped
                         future.wait();
+                        TRACE(ProcessContainers::ProcessContainerization, (_T("Container %s has stopped"), name.c_str()));
                     }
 
                     this->InternalUnlock();
@@ -149,7 +150,7 @@ namespace ProcessContainers {
         if (!runningContainers.empty()) {
             for (const std::pair<int32_t, std::string>& c : runningContainers) {
                 if (c.second == name) {
-                    TRACE_L1("container %s already running...", name.c_str());
+                    TRACE(ProcessContainers::ProcessContainerization, (_T("container %s already running..."), name.c_str()));
                     result = true;
                     break;
                 }
@@ -167,7 +168,6 @@ namespace ProcessContainers {
 
         // Interested in stop events only
         if (state == IDobbyProxyEvents::ContainerState::Stopped && containerId == *id) {
-            TRACE_L1("Container %s has stopped", containerId.c_str());
             this->InternalLock();
             _stopPromise.set_value();
             this->InternalUnlock();
@@ -211,13 +211,13 @@ namespace ProcessContainers {
             std::string containerInfoString = admin.mDobbyProxy->getContainerInfo(_descriptor);
 
             if (containerInfoString.empty()) {
-                TRACE_L1("Failed to get info for container %s", _name.c_str());
+                TRACE(Trace::Warning, (_T("Failed to get info for container %s"), _name.c_str()));
             } else {
                 // Dobby returns the container info as JSON, so parse it
                 JsonObject containerInfoJson;
                 WPEFramework::Core::OptionalType<WPEFramework::Core::JSON::Error> error;
                 if (!WPEFramework::Core::JSON::IElement::FromString(containerInfoString, containerInfoJson, error)) {
-                    TRACE_L1("Failed to parse Dobby Spec JSON due to: %s", WPEFramework::Core::JSON::ErrorDisplayMessage(error).c_str());
+                    TRACE(Trace::Warning, (_T("Failed to parse Dobby container info JSON due to: %s"), WPEFramework::Core::JSON::ErrorDisplayMessage(error).c_str()));
                 } else {
                     JsonArray pids = containerInfoJson["pids"].Array();
 
@@ -334,10 +334,10 @@ namespace ProcessContainers {
 
         // startContainer returns -1 on failure
         if (_descriptor <= 0) {
-            TRACE_L1("Failed to start container - internal Dobby error.");
+            TRACE(Trace::Error, (_T("Failed to start container %s - internal Dobby error."), _name.c_str()));
             result = false;
         } else {
-            TRACE_L1("started %s container! descriptor: %d", _name.c_str(), _descriptor);
+            TRACE(ProcessContainers::ProcessContainerization, (_T("started %s container! descriptor: %d"), _name.c_str(), _descriptor));
             result = true;
         }
         return result;
@@ -352,7 +352,7 @@ namespace ProcessContainers {
         bool stoppedSuccessfully = admin.mDobbyProxy->stopContainer(_descriptor, false);
 
         if (!stoppedSuccessfully) {
-            TRACE_L1("Failed to stop container, internal Dobby error. id: %s descriptor: %d", _name.c_str(), _descriptor);
+            TRACE(Trace::Error, (_T("Failed to stop container, internal Dobby error. id: %s descriptor: %d"), _name.c_str(), _descriptor));
         } else {
             result = true;
         }
diff --git a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
index a0ba25e2a..5377422a9 100644
--- a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
+++ b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.h
@@ -26,6 +26,8 @@
 #include "processcontainers/common/Lockable.h"
 #include "processcontainers/common/NetworkInfoUnimplemented.h"
 
+#include "Tracing.h"
+
 #include <Dobby/DobbyProtocol.h>
 #include <Dobby/Public/Dobby/IDobbyProxy.h>
 

From 163cdab5e4e72b091a3a98c6de50ebc6b9f7c1f8 Mon Sep 17 00:00:00 2001
From: Stephen Foulds <stephen.foulds@sky.uk>
Date: Thu, 17 Mar 2022 12:24:06 +0000
Subject: [PATCH 3/4] Clean up CMakeLists.txt

---
 Source/processcontainers/CMakeLists.txt | 28 -------------------------
 1 file changed, 28 deletions(-)

diff --git a/Source/processcontainers/CMakeLists.txt b/Source/processcontainers/CMakeLists.txt
index ca81ae9e9..0d4eb00ac 100644
--- a/Source/processcontainers/CMakeLists.txt
+++ b/Source/processcontainers/CMakeLists.txt
@@ -106,37 +106,9 @@ elseif (PROCESSCONTAINERS_CRUN)
 elseif (PROCESSCONTAINERS_DOBBY)
         find_package(Dobby REQUIRED CONFIG)
 
-        # We need libsystemd since we're using their dbus library (sd-bus)
-        # There's probably a better way of doing this...
-        find_path(SYSTEMD_INCLUDE_DIRS
-                NAMES systemd/sd-bus.h
-        )
-
-        find_library(SYSTEMD_LIBRARIES
-                NAMES systemd
-        )
-
-        add_definitions( -DRDK )
-
-        include(FindPackageHandleStandardArgs)
-        find_package_handle_standard_args(
-                LIBSYSTEMD
-                SYSTEMD_LIBRARIES SYSTEMD_INCLUDE_DIRS
-        )
         target_link_libraries(${TARGET}
                 PRIVATE
-                # Dobby libraries
                 DobbyClientLib
-                IpcService
-                AppInfraCommon
-                AppInfraLogging
-
-                ${SYSTEMD_LIBRARIES}
-                )
-
-        target_include_directories( ${TARGET}
-                PRIVATE
-                ${JSONCPP_INCLUDE_DIRS}
         )
 elseif (PROCESSCONTAINERS_AWC)
         find_package(LXC REQUIRED)

From 985b2aa155712ab29106bcba77eccfaf300d26f6 Mon Sep 17 00:00:00 2001
From: Stephen Foulds <stephen.foulds@sky.uk>
Date: Thu, 17 Mar 2022 16:23:27 +0000
Subject: [PATCH 4/4] Add timeout when waiting for container stop

---
 .../DobbyImplementation.cpp                   | 20 +++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
index 61675a21b..463bb4d3c 100644
--- a/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
+++ b/Source/processcontainers/implementations/DobbyImplementation/DobbyImplementation.cpp
@@ -119,12 +119,14 @@ namespace ProcessContainers {
                     bool stoppedSuccessfully = mDobbyProxy->stopContainer(c.first, true);
                     if (!stoppedSuccessfully) {
                         TRACE(Trace::Warning, (_T("Failed to destroy container, internal Dobby error. id: %s descriptor: %d"), name.c_str(), c.first));
-                    }
-                    else
-                    {
-                        // Block here until container has stopped
-                        future.wait();
-                        TRACE(ProcessContainers::ProcessContainerization, (_T("Container %s has stopped"), name.c_str()));
+                    } else {
+                        // Block here until container has stopped (max 5 seconds)
+                        std::future_status status = future.wait_for(std::chrono::seconds(5));
+                        if (status == std::future_status::ready) {
+                            TRACE(ProcessContainers::ProcessContainerization, (_T("Container %s has stopped"), name.c_str()));
+                        } else if (status == std::future_status::timeout) {
+                            TRACE(Trace::Warning, (_T("Timeout waiting for container %s to stop"), name.c_str()));
+                        }
                     }
 
                     this->InternalUnlock();
@@ -161,16 +163,14 @@ namespace ProcessContainers {
     }
 
     void DobbyContainerAdministrator::containerStopCallback(int32_t cd, const std::string& containerId,
-                                                            IDobbyProxyEvents::ContainerState state,
-                                                            const void* params)
+        IDobbyProxyEvents::ContainerState state,
+        const void* params)
     {
         const std::string* id = static_cast<const std::string*>(params);
 
         // Interested in stop events only
         if (state == IDobbyProxyEvents::ContainerState::Stopped && containerId == *id) {
-            this->InternalLock();
             _stopPromise.set_value();
-            this->InternalUnlock();
         }
     }
 

