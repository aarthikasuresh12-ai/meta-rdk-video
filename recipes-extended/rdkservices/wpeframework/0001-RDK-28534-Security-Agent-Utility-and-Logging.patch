From 054ee3d455df5bac9fd580276bd09fe281ec0834 Mon Sep 17 00:00:00 2001
From: Anand Kandasamy <Anand_Kandasamy@comcast.com>
Date: Fri, 19 Mar 2021 17:22:11 -0400
Subject: [PATCH] RDK:28534: Security Agent Utility and Logging

---
 Source/WPEFramework/CMakeLists.txt        |  5 ++
 Source/WPEFramework/Controller.cpp        |  3 ++
 Source/WPEFramework/ControllerJsonRpc.cpp |  2 +-
 Source/WPEFramework/PluginServer.cpp      | 20 +++++++-
 Source/WPEFramework/PluginServer.h        | 60 ++++++++++++++++++++---
 cmake/modules/FindRFC.cmake               | 23 +++++++++
 6 files changed, 104 insertions(+), 9 deletions(-)
 create mode 100644 cmake/modules/FindRFC.cmake

diff --git a/Source/WPEFramework/CMakeLists.txt b/Source/WPEFramework/CMakeLists.txt
index e369ebd1..8e37ff49 100644
--- a/Source/WPEFramework/CMakeLists.txt
+++ b/Source/WPEFramework/CMakeLists.txt
@@ -15,6 +15,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+find_package(RFC)
+
 get_filename_component(TARGET ${CMAKE_CURRENT_SOURCE_DIR} NAME)
 
 set(THREADPOOL_COUNT 4 CACHE STRING "The number of threads in the thread pool")
@@ -45,6 +47,8 @@ if (TREE_REFERENCE)
             )
 endif()
 
+target_include_directories(${TARGET} PRIVATE ${RFC_INCLUDE_DIRS})
+
 target_link_libraries(${TARGET}
         PRIVATE
           CompileSettingsDebug::CompileSettingsDebug
@@ -55,6 +59,7 @@ target_link_libraries(${TARGET}
           ${NAMESPACE}Cryptalgo::${NAMESPACE}Cryptalgo
           ${NAMESPACE}Plugins::${NAMESPACE}Plugins
           ${NAMESPACE}COMProcess::${NAMESPACE}COMProcess  # For COM executable define
+          ${RFC_LIBRARIES}
         )
 
 if(PROCESSCONTAINERS)
diff --git a/Source/WPEFramework/Controller.cpp b/Source/WPEFramework/Controller.cpp
index cd3a0c0c..796a0cd9 100644
--- a/Source/WPEFramework/Controller.cpp
+++ b/Source/WPEFramework/Controller.cpp
@@ -334,6 +334,9 @@ namespace Plugin {
                     if (callSign == _service->Callsign()) {
                         result->ErrorCode = Web::STATUS_FORBIDDEN;
                         result->Message = _T("The PluginHost Controller can not be deactivated.");
+                    } else if (callSign == _T("SecurityAgent")) {
+                        result->ErrorCode = Web::STATUS_FORBIDDEN;
+                        result->Message = _T("SecurityAgent plugin can not be deactivated.");
                     } else {
                         Core::ProxyType<PluginHost::Server::Service> pluginInfo(FromIdentifier(callSign));
 
diff --git a/Source/WPEFramework/ControllerJsonRpc.cpp b/Source/WPEFramework/ControllerJsonRpc.cpp
index 07594118..c4ce4e12 100644
--- a/Source/WPEFramework/ControllerJsonRpc.cpp
+++ b/Source/WPEFramework/ControllerJsonRpc.cpp
@@ -124,7 +124,7 @@ namespace Plugin {
 
         ASSERT(_pluginServer != nullptr);
 
-        if (callsign != Callsign()) {
+        if (callsign != Callsign() && (callsign != _T("SecurityAgent"))) {
             Core::ProxyType<PluginHost::Server::Service> service;
 
             if (_pluginServer->Services().FromIdentifier(callsign, service) == Core::ERROR_NONE) {
diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index eea93b01..fecc06a9 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -699,7 +699,25 @@ ENUM_CONVERSION_BEGIN(Core::ProcessInfo::scheduler)
             // as the controller does not know anything about security :-)
             securityProvider->Security(false);
         } else {
-            SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+            
+            // If RFC for Thunder Security is set to false, disable security.
+            if(_services.isThunderSecurityEnabled())
+            {
+                SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+                //activate Security Agent Plugin
+                Core::ProxyType<Service> service;
+                uint32_t result = _services.FromIdentifier("SecurityAgent", service);
+                if(result == Core::ERROR_NONE)
+                {
+                    service->Activate(PluginHost::IShell::STARTUP);
+                }
+
+            }
+            else
+            {
+                SYSLOG(Logging::Startup, (_T("Security DISABLED. Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable set to false")));
+                securityProvider->Security(false);
+            }
         }
 
         securityProvider->Release();
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index 82325fd1..86139009 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -33,6 +33,8 @@
 #error "Please define the name of the COM process!!!"
 #endif
 
+#include "rfcapi.h"
+
 #define MAX_EXTERNAL_WAITS 2000 /* Wait for 2 Seconds */
 
 namespace WPEFramework {
@@ -1579,7 +1581,10 @@ namespace PluginHost {
                 , _server(server)
                 , _subSystems(this)
                 , _authenticationHandler(nullptr)
+                , _enableThunderSecurity(true) // Thunder Security is enabled by Default.
             {
+                // If RFC for Thunder Security is set to false, disable security.
+                getRFC("Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable",_enableThunderSecurity);
             }
 #ifdef __WINDOWS__
 #pragma warning(default : 4355)
@@ -1591,12 +1596,41 @@ namespace PluginHost {
             }
 
         public:
+
+            inline bool getRFC(const string& name, bool& response)
+            {
+                bool retVal = false;
+    
+                RFC_ParamData_t param = {};
+                
+                WDMP_STATUS status = getRFCParameter(const_cast<char*>("WPEFramework"), name.c_str(), &param);
+                SYSLOG(Logging::Startup, (_T("name = %s, type = %d, value = %s"), param.name, param.type, param.value));
+
+                if (status == WDMP_SUCCESS)
+                {        
+                    response = (strncmp(param.value, "true", strlen("true")) == 0);
+                    retVal = true;
+                }
+                else
+                {
+                    SYSLOG(Logging::Startup, (_T("getRFCParameter fail : %s"), getRFCErrorString(status)));
+                }
+    
+                
+                return retVal;
+            }
+
+            inline bool isThunderSecurityEnabled()
+            {
+                return _enableThunderSecurity;
+            }           
+
             inline void Security(const bool enabled)
             {
                 _adminLock.Lock();
 
                 if ((_authenticationHandler == nullptr) ^ (enabled == false)) {
-                    if (_authenticationHandler == nullptr) {
+                    if ((_authenticationHandler == nullptr) && _enableThunderSecurity) {
                         // Let get the AuthentcationHandler.
                         _authenticationHandler = reinterpret_cast<IAuthenticate*>(QueryInterfaceByCallsign(IAuthenticate::ID, _subSystems.SecurityCallsign()));
                     } else {
@@ -1950,6 +1984,7 @@ namespace PluginHost {
             Server& _server;
             Core::Sink<SubSystems> _subSystems;
             IAuthenticate* _authenticationHandler;
+            bool _enableThunderSecurity;
         };
 
         // Connection handler is the listening socket and keeps track of all open
@@ -2465,9 +2500,21 @@ namespace PluginHost {
                     break;
                 }
                 case Request::UNAUTHORIZED: {
-                    // Report that we, at least, need a call sign.
-                    Submit(_unauthorizedRequest);
-                    break;
+                    // Report that request is unauthorized.
+                        Core::ProxyType<Web::Response> response = IFactories::Instance().Response();
+                        Core::ProxyType<Core::JSONRPC::Message> body(Core::proxy_cast<Core::JSONRPC::Message>(IFactories::Instance().JSONRPC()));
+                        
+                        Core::ProxyType<Core::JSONRPC::Message> message(request->Body<Core::JSONRPC::Message>());
+                        if(message.IsValid())
+                            body->Id = message->Id;
+                        
+                        body->JSONRPC = Core::JSONRPC::Message::DefaultVersion;
+                        body->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
+                        body->Error.Text = _T("Request needs authorization. Missing or invalid token.");
+                        response->Body(body);
+                        Submit(response);
+                        break;
+
                 }
                 case Request::COMPLETE: {
                     Core::ProxyType<Service> service(Core::proxy_cast<Service>(request->Service()));
@@ -2545,10 +2592,9 @@ namespace PluginHost {
                         PluginHost::Channel::Unlock();
 
                         if (securityClearance == false) {
-                            // Oopsie daisy we are not allowed to handle this request.
-                            // TODO: How shall we report back on this?
+                            SYSLOG(Logging::Startup, (_T("Security failed, incoming request is not authorized.")));
                             message->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
-                            message->Error.Text = _T("method invokation not allowed.");
+                            message->Error.Text = _T("Request needs authorization. Missing or invalid token.");
                             Submit(Core::ProxyType<Core::JSON::IElement>(message));
                         }
                     }
diff --git a/cmake/modules/FindRFC.cmake b/cmake/modules/FindRFC.cmake
new file mode 100644
index 00000000..57426f59
--- /dev/null
+++ b/cmake/modules/FindRFC.cmake
@@ -0,0 +1,23 @@
+# - Try to find RFC components
+# Once done this will define
+#  RFC_FOUND - System has RFC
+#  RFC_LIBRARIES - The libraries needed to use  RFC
+#  RFC_INCLUDE_DIRS - The headers needed to use RFC
+
+find_package(PkgConfig)
+
+find_library(RFC_LIBRARIES NAMES rfcapi)
+find_path(RFC_INCLUDE_DIRS NAMES rfcapi.h )
+find_path(WDMP_INCLUDE_DIRS NAMES wdmp-c.h PATH_SUFFIXES wdmp-c)
+
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} )
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} CACHE PATH "Path to RFC include")
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(RFC DEFAULT_MSG RFC_INCLUDE_DIRS RFC_LIBRARIES)
+
+mark_as_advanced(
+    RFC_FOUND
+    RFC_INCLUDE_DIRS
+    RFC_LIBRARIES)
+
-- 
2.17.1

