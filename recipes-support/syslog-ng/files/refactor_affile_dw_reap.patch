Date: Apr 10, 2018

From: 9ead49af4b192e7a6b8e32403d9df2df4fb07237 Apr 10, 2018 

Subject: [PATCH] Partially revert a time-reap race condition fix 

	This partially reverts 89403bd, because - along
	with the refactor reverted earlier - it makes the pre-existing race condition
	trigger much more frequently.

	Until we can properly fix the race, bringing down its frequency lowers its
	impact.
     
	Revert "affile: refactor affile_dw_reap()"

	This - and other changes, to be reverted in a followup - make a race condition
	in time-reap much, much easier to trigger and trip over. As fixing it properly
	is non-trivial, yet, the impact is severe, a revert may be the best option in
	the short run.

	This reverts commit 8c6287f.

Source: GITHUB

License: LGPL-2.1-or-later

Upstream-Status: Submitted [ https://github.com/syslog-ng/syslog-ng/commit/9ead49af4b192e7a6b8e32403d9df2df4fb07237 ]

Signed-off-by: Gergely Nagy <algernon@balabit.com>
---

diff -ruPN a/modules/affile/affile-dest.c b/modules/affile/affile-dest.c
--- a/modules/affile/affile-dest.c	2018-08-23 11:12:19.901837936 +0000
+++ b/modules/affile/affile-dest.c	2018-08-23 11:30:10.301759733 +0000
@@ -112,7 +112,7 @@
   return persist_name;
 }
 
-static gboolean affile_dd_reap_writer(AFFileDestDriver *self, AFFileDestWriter *dw);
+static void affile_dd_reap_writer(AFFileDestDriver *self, AFFileDestWriter *dw);
 
 static void
 affile_dw_arm_reaper(AFFileDestWriter *self)
@@ -130,14 +130,21 @@
   AFFileDestWriter *self = (AFFileDestWriter *) s;
 
   main_loop_assert_main_thread();
-  if (log_writer_has_pending_writes(self->writer))
-  {
-    affile_dw_arm_reaper(self);
-    return;
-  }
 
-  if (!affile_dd_reap_writer(self->owner, self))
-    affile_dw_arm_reaper(self);
+  g_static_mutex_lock(&self->owner->lock);
+  if (!log_writer_has_pending_writes((LogWriter *) self->writer) && !self->queue_pending)
+    {
+      msg_verbose("Destination timed out, reaping",
+                  evt_tag_str("template", self->owner->filename_template->template),
+                  evt_tag_str("filename", self->filename));
+      affile_dd_reap_writer(self->owner, self);
+      g_static_mutex_unlock(&self->owner->lock);
+    }
+  else
+    {
+      g_static_mutex_unlock(&self->owner->lock);
+      affile_dw_arm_reaper(self);
+    }
 }
 
 static gboolean
@@ -393,20 +400,14 @@
   return persist_name;
 }
 
-static gboolean
+/* DestDriver lock must be held before calling this function */
+static void
 affile_dd_reap_writer(AFFileDestDriver *self, AFFileDestWriter *dw)
 {
+
+  LogWriter *writer = (LogWriter *)dw->writer;
+
   main_loop_assert_main_thread();
-  g_static_mutex_lock(&self->lock);
-  if (dw->queue_pending)
-  {
-    g_static_mutex_unlock(&self->lock);
-    return FALSE;
-  }
-
-  msg_verbose("Destination timed out, reaping",
-     evt_tag_str("template", self->filename_template->template),
-     evt_tag_str("filename", dw->filename));
 
   if (self->filename_is_a_template)
     {
@@ -419,13 +420,11 @@
       self->single_writer = NULL;
     }
 
-  log_dest_driver_release_queue(&self->super, log_writer_get_queue(dw->writer));
+  LogQueue *queue = log_writer_get_queue(writer);
+
   log_pipe_deinit(&dw->super);
+  log_dest_driver_release_queue(&self->super, queue);
   log_pipe_unref(&dw->super);
-
-  g_static_mutex_unlock(&self->lock);
-
-  return TRUE;
 }
 
 
