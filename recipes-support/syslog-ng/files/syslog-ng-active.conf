@version: 3.8
#
# Syslog-ng configuration file, compatible with default Debian syslogd
# installation. Originally written by anonymous (I can't find his name)
# Revised, and rewrited by me (SZALAY Attila <sasa@debian.org>)

# First, set some global options.
options { chain_hostnames(off); flush_lines(0); use_dns(no); use_fqdn(no);
	  owner("root"); group("root"); perm(0644); stats_freq(0);
	  bad_hostname("^gconfd$");frac-digits(6);keep-timestamp(yes);threaded(yes);
};
@define log_path "/opt/logs"
########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src { unix-dgram("/run/systemd/journal/syslog"); internal();
       	     file("/proc/kmsg" program_override("kernel"));
};

# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
#source s_net { tcp(ip(127.0.0.1) port(1000) authentication(required) encrypt(allow)); };

########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file("/var/log/auth.log"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_mail { file("/var/log/mail.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file("/var/log/mail/mail.info"); };
destination d_mailwarn { file("/var/log/mail/mail.warn"); };
destination d_mailerr { file("/var/log/mail/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

# Some 'catch-all' logfiles.
#
destination d_debug { file("/var/log/debug"); };
destination d_error { file("/var/log/error"); };
destination d_messages { file("/var/log/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Virtual console.
#
destination d_console_all { file("/dev/tty10"); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

# Send the messages to an other host
#
#destination d_net { tcp("127.0.0.1" port(1000) authentication(on) encrypt(on) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file("/var/log/ppp.log"); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };
filter f_error { level(err .. emerg) ; };
filter f_messages { level(info,notice,warn) and
                    not facility(auth,authpriv,cron,daemon,mail,news); };

filter f_auth { facility(auth, authpriv) and not filter(f_debug); };
filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug); };
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_syslog3 { not facility(auth, authpriv, mail) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
#log { source(s_src); filter(f_auth); destination(d_auth); };
#log { source(s_src); filter(f_cron); destination(d_cron); };
#log { source(s_src); filter(f_daemon); destination(d_daemon); };
#log { source(s_src); filter(f_kern); destination(d_kern); };
#log { source(s_src); filter(f_lpr); destination(d_lpr); };
#log { source(s_src); filter(f_syslog3); destination(d_syslog); };
#log { source(s_src); filter(f_user); destination(d_user); };
#log { source(s_src); filter(f_uucp); destination(d_uucp); };

#log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

#log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
#log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
#log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };
#log { source(s_src); filter(f_cnews); destination(d_console_all); };
#log { source(s_src); filter(f_cother); destination(d_console_all); };

#log { source(s_src); filter(f_ppp); destination(d_ppp); };

#log { source(s_src); filter(f_debug); destination(d_debug); };
#log { source(s_src); filter(f_error); destination(d_error); };
#log { source(s_src); filter(f_messages); destination(d_messages); };

#log { source(s_src); filter(f_console); destination(d_console_all);
				    #destination(d_xconsole); };
#log { source(s_src); filter(f_crit); destination(d_console); };

# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };

#Remote logging from ecm source
source s_ecm_host {
            syslog (
                ip(192.168.100.200)
                port(514)
                transport(udp)
            );
};

template t_rdk_template { template("${S_YEAR} ${S_MONTH_ABBREV} ${S_DAY} ${S_HOUR}:${S_MIN}:${S_SEC}.${S_USEC} ${HOST} ${MSGHDR} ${MSG}\n");};
destination d_ecm { file("`log_path`/messages-ecm.txt"); };
destination d_myfile { file("`log_path`/myfile.txt"  template(t_rdk_template));};
destination d_recvr { file("`log_path`/receiver.log"  template(t_rdk_template));};
destination d_ocap { file("`log_path`/ocapri_log.txt"  template(t_rdk_template));};
destination d_vod { file("`log_path`/vodclient_log.txt"  template(t_rdk_template));};
destination d_upstream { file("`log_path`/upstream_stats.log"  template(t_rdk_template));};
destination d_uimgr { file("`log_path`/uimgr_log.txt"  template(t_rdk_template));};
destination d_trmmgr { file("`log_path`/trmmgr.log"  template(t_rdk_template));};
destination d_trm { file("`log_path`/trm.log"  template(t_rdk_template));};
destination d_system { file("`log_path`/system.log"  template(t_rdk_template));};
destination d_storagemgr { file("`log_path`/storagemgr.log"  template(t_rdk_template));};
destination d_socprov { file("`log_path`/socprov.log"  template(t_rdk_template));};
destination d_socprov_crypto { file("`log_path`/socprov-crypto.log"  template(t_rdk_template));};
destination d_snmpd { file("`log_path`/snmpd.log"  template(t_rdk_template));};
destination d_rf4ce { file("`log_path`/rf4ce_log.txt"  template(t_rdk_template));};
destination d_ctrlm { file("`log_path`/ctrlm_log.txt"  template(t_rdk_template));};
destination d_syssnmp { file("`log_path`/mocalog.txt"  template(t_rdk_template));};
destination d_lightsleep { file("`log_path`/lightsleep.log"  template(t_rdk_template));};
destination d_fog { file("`log_path`/fog.log"  template(t_rdk_template));};
destination d_dropbear { file("`log_path`/dropbear.log"  template(t_rdk_template));};
destination d_card_provision_check { file("`log_path`/card-provision-check.log"  template(t_rdk_template));};
destination d_authservice { file("`log_path`/authservice.log"  template(t_rdk_template));};
destination d_application { file("`log_path`/applications.log"  template(t_rdk_template));};
destination d_xdevice { file("`log_path`/xdevice.log"  template(t_rdk_template));};
destination d_xdiscovery { file("`log_path`/xdiscovery.log"  template(t_rdk_template));};
destination d_dibbler { file("`log_path`/dibbler.log"  template(t_rdk_template));};
destination d_xi { file("`log_path`/discoverV4Client.log"  template(t_rdk_template));};
destination d_ecfsmount { file("`log_path`/ecfs.txt"  template(t_rdk_template));};
destination d_device-details { file("`log_path`/device_details.log"  template(t_rdk_template));};
destination d_audiocapturemgr { file("`log_path`/audiocapturemgr.log"  template(t_rdk_template));};
destination d_stunnel { file("`log_path`/stunnel.log"  template(t_rdk_template));};
destination d_nlmon { file("`log_path`/nlmon.log"  template(t_rdk_template));};
destination d_cgrpmemory { file("`log_path`/cgrpmemory.log"  template(t_rdk_template));};
destination d_cgrpmemorytest { file("`log_path`/cgrmemorytest.log"  template(t_rdk_template));};
destination d_otherlogs { file("`log_path`/messages.txt"  template(t_rdk_template));};
destination d_parodus { file("`log_path`/parodus.log"  template(t_rdk_template));};
destination d_tr69hostif { file("`log_path`/tr69hostif.log"  template(t_rdk_template));};
destination d_apps-rdm { file("`log_path`/rdm_status.log"  template(t_rdk_template));};
destination d_vitalprocess-info { file("`log_path`/top_log.txt"  template(t_rdk_template));};
destination d_cpuprocanalyzer { file("`log_path`/cpuprocanalyzer.log"  template(t_rdk_template));};
destination d_iptables-log { file("`log_path`/iptables.log"  template(t_rdk_template));};
destination d_rfc-config { file("`log_path`/rfcscript.log"  template(t_rdk_template));};
destination d_wpeframework { file("`log_path`/wpeframework.log"  template(t_rdk_template));};
destination d_logrotate { file("`log_path`/logrotate.log"  template(t_rdk_template));};

filter f_recvr { program("runXRE") or program("runAppManager.sh") or program("Receiver") or program("rdkbrowser2") or program("rtrmfplayer"); };
filter f_ocap { program("rmfStreamer") or program("runPod") or program("runSnmp") or program("sdvAgent"); };
filter f_vod { program("vodClientApp"); };
filter f_upstream { program("network-statistics"); };
filter f_uimgr { program("IARMDaemonMain") or program("irMgrMain") or program("dsMgrMain") or program("sysMgrMain") or program("pwrMgrMain"); };
filter f_trmmgr { program("TRMMgr"); };
filter f_trm { program("srv") or program("websocket-trm-proxy"); };
filter f_system { program("systemd"); };
filter f_storagemgr { program("storageMgrMain"); };
filter f_socprov { program("socprovisioning"); };
filter f_socprov_crypto { program("crypto-soc"); };
filter f_snmpd { program("snmpd"); };
filter f_rf4ce { program("rf4ceMgr") or program("deviceUpdateMgrMain"); };
filter f_ctrlm { program("controlMgr") or program("ctrlm-hal-rf4ce") or program("lprfServer"); };
filter f_syssnmp { program("syssnmpagent"); };
filter f_lightsleep { program("pwr-state-monitor"); };
filter f_fog { program("fog"); };
filter f_dropbear { program("dropbear"); };
filter f_card_provision_check { program("card-provision-check"); };
filter f_authservice { program("authservice"); };
filter f_docsis_utility { program("docsis_utility"); };
filter f_xdevice { program("xcal-device"); };
filter f_xdiscovery { program("xupnp"); };
filter f_dibbler { program("dibbler-client"); };
filter f_xi { program("discoverV4Client"); };
filter f_ecfsmount { program("ecryptfs") or program("ecfsmount"); };
filter f_device-details { program("getDeviceDetails"); };
filter f_parodus { program("parodus"); };
filter f_tr69hostif { program("tr69hostif"); };
filter f_audiocapturemgr { program("audiocapturemgr"); };
filter f_stunnel { program("stunnel"); };
filter f_nlmon { program("nlmon"); };
filter f_cgrpmemory { program("cgrpmemory"); };
filter f_cgrpmemorytest { program("cgrpmemorytest"); };
filter f_apps-rdm { program("apps-rdm"); };
filter f_vitalprocess-info { program("vitalProcessInfo.sh") or program("getGdlFreeMemory.sh"); };
filter f_cpuprocanalyzer { program("cpuprocanalyzer"); };
filter f_iptables-log { program("iptables"); };
filter f_rfc-config { program("rfc-config"); };
filter f_wpeframework { program("WPE*"); };
filter f_logrotate { program("logrotate"); };

# For better performance order the log filters based on the process which prints more logs first.
# Log statements are processed in the order they appear in the configuration file.
log { source(s_ecm_host); destination(d_ecm); };

log { source(s_src); filter(f_uimgr);  destination(d_uimgr); flags(final); };
log { source(s_src); filter(f_ocap); destination(d_ocap); flags(final); };
log { source(s_src); filter(f_recvr); destination(d_recvr); flags(final); };
log { source(s_src); filter(f_trm);  destination(d_trm); flags(final); };
log { source(s_src); filter(f_trmmgr);  destination(d_trmmgr); flags(final); };
log { source(s_src); filter(f_xdiscovery);  destination(d_xdiscovery); flags(final); };
log { source(s_src); filter(f_vod); destination(d_vod); flags(final); };
log { source(s_src); filter(f_ctrlm);  destination(d_ctrlm); flags(final); };
log { source(s_src); filter(f_rf4ce);  destination(d_rf4ce); flags(final); };
log { source(s_src); filter(f_tr69hostif);  destination(d_tr69hostif); flags(final); };
log { source(s_src); filter(f_storagemgr);  destination(d_storagemgr); flags(final); };
log { source(s_src); filter(f_fog);  destination(d_fog); flags(final); };
log { source(s_src); filter(f_xdevice);  destination(d_xdevice); flags(final); };
log { source(s_src); filter(f_authservice);  destination(d_authservice); flags(final); };
log { source(s_src); filter(f_parodus);  destination(d_parodus); flags(final); };
log { source(s_src); filter(f_socprov);  destination(d_socprov); flags(final); };
log { source(s_src); filter(f_socprov_crypto);  destination(d_socprov_crypto); flags(final); };
log { source(s_src); filter(f_snmpd);  destination(d_snmpd); flags(final); };
log { source(s_src); filter(f_syssnmp);  destination(d_syssnmp); flags(final); };
log { source(s_src); filter(f_nlmon);  destination(d_nlmon); flags(final); };
log { source(s_src); filter(f_stunnel);  destination(d_stunnel); flags(final); };
log { source(s_src); filter(f_dropbear);  destination(d_dropbear); flags(final); };
log { source(s_src); filter(f_dibbler);  destination(d_dibbler); flags(final); };
log { source(s_src); filter(f_system);  destination(d_system); flags(final); };
log { source(s_src); filter(f_xi);  destination(d_xi); flags(final); };
log { source(s_src); filter(f_upstream); destination(d_upstream); flags(final); };
log { source(s_src); filter(f_lightsleep);  destination(d_lightsleep); flags(final); };
log { source(s_src); filter(f_card_provision_check);  destination(d_card_provision_check); flags(final); };
log { source(s_src); filter(f_docsis_utility);  destination(d_application); flags(final); };
log { source(s_src); filter(f_ecfsmount);  destination(d_ecfsmount); flags(final); };
log { source(s_src); filter(f_device-details);  destination(d_device-details); flags(final); };
log { source(s_src); filter(f_audiocapturemgr);  destination(d_audiocapturemgr); flags(final); };
log { source(s_src); filter(f_cgrpmemory);  destination(d_cgrpmemory); flags(final); };
log { source(s_src); filter(f_cgrpmemorytest);  destination(d_cgrpmemorytest); flags(final); };
log { source(s_src); filter(f_apps-rdm);  destination(d_apps-rdm); flags(final); };
log { source(s_src); filter(f_vitalprocess-info);  destination(d_vitalprocess-info); flags(final); };
log { source(s_src); filter(f_cpuprocanalyzer);  destination(d_cpuprocanalyzer); flags(final); };
log { source(s_src); filter(f_iptables-log);  destination(d_iptables-log); flags(final); };
log { source(s_src); filter(f_rfc-config);  destination(d_rfc-config); flags(final); };
log { source(s_src); filter(f_wpeframework);  destination(d_wpeframework); flags(final); };
log { source(s_src); filter(f_logrotate);  destination(d_logrotate); flags(final); };

log { source(s_src); destination(d_otherlogs); flags(fallback); };
