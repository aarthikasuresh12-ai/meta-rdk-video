From 89ab01868471f86f4c61c95de69bcadbcc9f895b Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Fri, 17 Nov 2017 09:59:09 -0500
Subject: [PATCH] Check connection state while waiting for response.

This handles the case when remote peer closed connection/crashed while
handling the request.
---
 remote/rtRemoteAsyncHandle.cpp | 49 ++++++++++++++++++++++++++++++++----------
 remote/rtRemoteAsyncHandle.h   |  4 +++-
 remote/rtRemoteClient.cpp      | 15 +++++++++----
 remote/rtRemoteClient.h        |  1 +
 4 files changed, 53 insertions(+), 16 deletions(-)

diff --git a/remote/rtRemoteAsyncHandle.cpp b/remote/rtRemoteAsyncHandle.cpp
index b19309b..2953bcd 100644
--- a/remote/rtRemoteAsyncHandle.cpp
+++ b/remote/rtRemoteAsyncHandle.cpp
@@ -3,6 +3,8 @@
 #include "rtRemoteMessage.h"
 #include "rtRemoteConfig.h"
 
+#include <chrono>
+
 rtRemoteAsyncHandle::rtRemoteAsyncHandle(rtRemoteEnvironment* env, rtRemoteCorrelationKey k)
   : m_env(env)
   , m_key(k)
@@ -28,7 +30,7 @@ rtRemoteAsyncHandle::onResponseHandler(std::shared_ptr<rtRemoteClient>& /*client
 }
 
 rtError
-rtRemoteAsyncHandle::wait(uint32_t timeoutInMilliseconds)
+rtRemoteAsyncHandle::waitUntil(uint32_t timeoutInMilliseconds, std::function<rtError()> connectionState)
 {
   if (m_error != RT_ERROR_IN_PROGRESS)
     return m_error;
@@ -38,17 +40,37 @@ rtRemoteAsyncHandle::wait(uint32_t timeoutInMilliseconds)
 
   rtError e = RT_OK;
 
-  if (!m_env->Config->server_use_dispatch_thread())
+  auto nowTime = std::chrono::steady_clock::now();
+  auto stopTime = nowTime + std::chrono::milliseconds(timeoutInMilliseconds);
+
+  for (; stopTime > nowTime; nowTime = std::chrono::steady_clock::now())
   {
-    time_t timeout = time(nullptr) + ((timeoutInMilliseconds+500) / 1000);
-    e = m_error = RT_ERROR_TIMEOUT;
+    if ((e = connectionState()) != RT_OK)
+    {
+      break;
+    }
+
+    auto remainingDuration =
+      std::chrono::duration_cast<std::chrono::milliseconds>(stopTime - nowTime);
 
-    while (timeout > time(nullptr))
+    // Wake up at least once per second to check connection state
+    auto waitDuration =
+      std::min(std::max(std::chrono::milliseconds(1), remainingDuration),
+               std::chrono::milliseconds(1000u));
+
+    if (!m_env->Config->server_use_dispatch_thread())
     {
       rtRemoteCorrelationKey k = kInvalidCorrelationKey;
       rtLogDebug("Waiting for item with key = %s", m_key.toString().c_str());
 
-      e = m_env->processSingleWorkItem(std::chrono::milliseconds(timeoutInMilliseconds), true, &k);
+      m_error = RT_ERROR_TIMEOUT;
+      e = m_env->processSingleWorkItem(waitDuration, true, &k);
+
+      if ( e == RT_ERROR_TIMEOUT )
+      {
+        continue;
+      }
+
       rtLogDebug("Got response with key = %s, m_error = %d, error = %d", k.toString().c_str(), m_error, e);
 
       if ( (e == RT_OK) && ((m_error == RT_OK) || (k == m_key)) )
@@ -61,15 +83,20 @@ rtRemoteAsyncHandle::wait(uint32_t timeoutInMilliseconds)
         break;
       }
     }
-  }
-  else
-  {
-    e = m_env->waitForResponse(std::chrono::milliseconds(timeoutInMilliseconds), m_key);
+    else
+    {
+      e = m_env->waitForResponse(waitDuration, m_key);
+
+      if ( e != RT_ERROR_TIMEOUT )
+      {
+        break;
+      }
+    }
   }
 
   if ((e != RT_OK) || (m_error != RT_OK))
   {
-      rtLogError("Got error response m_error = %d, error = %d", m_error, e);
+    rtLogError("Got error response m_error = %d (%s), error = %d (%s)", m_error, rtStrError(m_error), e, rtStrError(e));
   }
 
   return e;
diff --git a/remote/rtRemoteAsyncHandle.h b/remote/rtRemoteAsyncHandle.h
index 7d67247..441b38b 100644
--- a/remote/rtRemoteAsyncHandle.h
+++ b/remote/rtRemoteAsyncHandle.h
@@ -1,6 +1,8 @@
 #ifndef __RT_REMOTE_ASYNC_HANDLE__
 #define __RT_REMOTE_ASYNC_HANDLE__
 
+#include <functional>
+
 #include "rtRemoteCorrelationKey.h"
 #include "rtRemoteEnvironment.h"
 #include "rtRemoteMessage.h"
@@ -15,7 +17,7 @@ public:
   ~rtRemoteAsyncHandle();
 
   rtRemoteMessagePtr response() const;
-  rtError wait(uint32_t timeoutInMilliSeconds);
+  rtError waitUntil(uint32_t timeoutInMilliSeconds, std::function<rtError()> connectionState);
 
 private:
   rtRemoteAsyncHandle(rtRemoteEnvironment* env, rtRemoteCorrelationKey k);
diff --git a/remote/rtRemoteClient.cpp b/remote/rtRemoteClient.cpp
index bcf39ed..17f69bd 100644
--- a/remote/rtRemoteClient.cpp
+++ b/remote/rtRemoteClient.cpp
@@ -198,7 +198,7 @@ rtRemoteClient::startSession(std::string const& objectId, uint32_t timeout)
     return RT_ERROR_STREAM_CLOSED;
 
   rtRemoteAsyncHandle handle = s->sendWithWait(req, k);
-  rtError e = handle.wait(timeout);
+  rtError e = handle.waitUntil(timeout, [this] { return checkStream(); });
   if (e != RT_OK)
     rtLogDebug("e: %s", rtStrError(e));
 
@@ -305,7 +305,7 @@ rtRemoteClient::sendSet(rtRemoteMessagePtr const& req, rtRemoteCorrelationKey k)
 
   rtRemoteAsyncHandle handle = s->sendWithWait(req, k);
 
-  rtError e = handle.wait(0);
+  rtError e = handle.waitUntil(0, [this] { return checkStream(); });
   if (e == RT_OK)
   {
     rtRemoteMessagePtr res = handle.response();
@@ -356,7 +356,7 @@ rtRemoteClient::sendGet(rtRemoteMessagePtr const& req, rtRemoteCorrelationKey k,
 
   rtRemoteAsyncHandle handle = s->sendWithWait(req, k);
 
-  rtError e = handle.wait(0);
+  rtError e = handle.waitUntil(0, [this] { return checkStream(); });
   if (e == RT_OK)
   {
     rtRemoteMessagePtr res = handle.response();
@@ -406,7 +406,7 @@ rtRemoteClient::sendCall(rtRemoteMessagePtr const& req, rtRemoteCorrelationKey k
 
   rtRemoteAsyncHandle handle = s->sendWithWait(req, k);
 
-  rtError e = handle.wait(0);
+  rtError e = handle.waitUntil(0, [this] { return checkStream(); });
   if (e == RT_OK)
   {
     rtRemoteMessagePtr res = handle.response();
@@ -449,3 +449,10 @@ rtRemoteClient::getLocalEndpoint() const
   }
   return saddr;
 }
+
+rtError
+rtRemoteClient::checkStream()
+{
+  std::shared_ptr<rtRemoteStream> s = getStream();
+  return s && s->isOpen() ? RT_OK : RT_ERROR_STREAM_CLOSED;
+}
diff --git a/remote/rtRemoteClient.h b/remote/rtRemoteClient.h
index f6260ee..0f20e2c 100644
--- a/remote/rtRemoteClient.h
+++ b/remote/rtRemoteClient.h
@@ -94,6 +94,7 @@ private:
       s = m_stream;
     return s;
   }
+  rtError checkStream();
 
   std::shared_ptr<rtRemoteStream>           m_stream;
   std::vector<std::string>                  m_objects;
-- 
2.7.4

