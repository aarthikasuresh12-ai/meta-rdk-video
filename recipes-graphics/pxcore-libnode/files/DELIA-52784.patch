Date: Oct 28 07:42:58 2021 -0400
From: I48903e16e2ca241ee19f4a677436cf7a504fde43 Oct 28, 2021 07:42 AM
Subject: [PATCH] 302 http response handling
Source: COMCAST
License: Apache-2.0
Upstream-Status: Pending
Signed-off-by: Suresh Sathiah <Suresh_Sathiah@comcast.com>
diff --git a/src/rtFileDownloader.cpp b/src/rtFileDownloader.cpp
index 99503fb31..0dd15e3f2 100644
--- a/src/rtFileDownloader.cpp
+++ b/src/rtFileDownloader.cpp
@@ -904,12 +920,11 @@ void rtFileDownloader::downloadFileAsByteRange(rtFileDownloadRequest* downloadRe
 #endif
     {
       const rtString actualUrl = downloadRequest->fileUrl();
-      bool reDirect = false;
-      nwDownloadSuccess = downloadByteRangeFromNetwork(downloadRequest, &reDirect);
-      if(reDirect == true)
+      int reDirectCount = 0;
+      nwDownloadSuccess = downloadByteRangeFromNetwork(downloadRequest, &reDirectCount);
+      if(reDirectCount == 1)
       {
-         reDirect = false;
-         nwDownloadSuccess = downloadByteRangeFromNetwork(downloadRequest, &reDirect);
+         nwDownloadSuccess = downloadByteRangeFromNetwork(downloadRequest, &reDirectCount);
          downloadRequest->setFileUrl(actualUrl.cString());
       }
     }
@@ -979,7 +994,7 @@ void rtFileDownloader::downloadFileAsByteRange(rtFileDownloadRequest* downloadRe
     clearFileDownloadRequest(downloadRequest);
 }
 
-bool rtFileDownloader::downloadByteRangeFromNetwork(rtFileDownloadRequest* downloadRequest, bool *bRedirect)
+bool rtFileDownloader::downloadByteRangeFromNetwork(rtFileDownloadRequest* downloadRequest, int *redirectCount)
 {
    CURL *curl_handle = NULL;
    CURLcode res = CURLE_OK;
@@ -1185,21 +1209,18 @@ bool rtFileDownloader::downloadByteRangeFromNetwork(rtFileDownloadRequest* downl
          curl_easy_setopt(curl_handle, CURLOPT_HEADERFUNCTION, NULL);
          curl_easy_setopt(curl_handle, CURLOPT_HEADERDATA, NULL);
 
-         rtString httpHeaderStr(reinterpret_cast< char const* >((unsigned char *)chunk.headerBuffer));
-
-         // Parsing redirected Url if 302 found.
-         size_t find302Status = httpHeaderStr.find(0, "302 Found");
-         if(find302Status != -1)
-         {
-            rtString str302Found = httpHeaderStr.substring(find302Status);
-            size_t findReDirLoc = str302Found.find(0, "Location:");
+         size_t responseCode = 0;
+         curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &responseCode );
+         rtLogInfo("responseCode %d\n", responseCode);
+         if(responseCode == 302)
+         {
+            char *reDirUrl = NULL;
+            curl_easy_getinfo(curl_handle, CURLINFO_REDIRECT_URL, &reDirUrl );
 
-            if(findReDirLoc != -1)
+            if(reDirUrl)
             {
-               strLocation = str302Found.substring(findReDirLoc+strlen("Location:"));
-               strLocation = strLocation.substring(0, strLocation.find(0, "\n")-1);
-               curlUrl = strLocation.trim();
-               rtLogInfo("302 Found. Redirected curl URL (%s)", curlUrl.cString());
+               curlUrl = rtString(reDirUrl);
+               rtLogInfo("302. Redirected curl URL (%s)", curlUrl.cString());
 
                //clean up contents on error
                if (chunk.contentsBuffer != NULL)
@@ -1219,12 +1240,21 @@ bool rtFileDownloader::downloadByteRangeFromNetwork(rtFileDownloadRequest* downl
                downloadRequest->setHeaderData(NULL, 0);
 
                downloadRequest->setFileUrl(curlUrl.cString());
-               rtLogInfo("downloadRequest->fileUrl().cString() URL (%s)", downloadRequest->fileUrl().cString());
-               *bRedirect = true;
+               (*redirectCount)++;
+
+               rtLogInfo("downloadRequest->fileUrl().cString() URL (%s) redirectCount %d", downloadRequest->fileUrl().cString(), *redirectCount);
+               if(*redirectCount == 2)
+               {
+                  res = CURLE_TOO_MANY_REDIRECTS;
+                  strcpy(errorBuffer, "CURLE_TOO_MANY_REDIRECTS");
+                  rtLogError("LSA CURLE_TOO_MANY_REDIRECTS. More than one redirect, so forcing not to proceed.");
+               }
                break;
             }
          }
 
+         rtString httpHeaderStr(reinterpret_cast< char const* >((unsigned char *)chunk.headerBuffer));
+
          // Parsing total filesize from Content-Range.
          int32_t findContentRange = httpHeaderStr.find(0, "Content-Range: bytes");
          if(findContentRange != -1)
@@ -1246,6 +1276,14 @@ bool rtFileDownloader::downloadByteRangeFromNetwork(rtFileDownloadRequest* downl
          else
             rtLogError("Http header doesn't have Content-Range. Url(%s)\n", downloadRequest->fileUrl().cString());
 
+         if(downloadRequest->actualFileSize() == 0)
+         {
+            res = CURLE_RANGE_ERROR;
+            strcpy(errorBuffer, "CURLE_RANGE_ERROR");
+            rtLogError("LSA CURLE_RANGE_ERROR. Failed to obtain fileSize from http response header.");
+            break;
+         }
+
          multipleIntervals = (downloadRequest->actualFileSize() >= downloadRequest->byteRangeIntervals()) ? (downloadRequest->actualFileSize() / downloadRequest->byteRangeIntervals()) : 0;
          multipleIntervals++; // Increment one more because already one iteration made before determinding multipleIntervals.
          rtLogInfo("File[%s] multipleIntervals [%ld] fileSize[%ld]\n", downloadRequest->fileUrl().cString(), multipleIntervals, downloadRequest->actualFileSize());
diff --git a/src/rtFileDownloader.h b/src/rtFileDownloader.h
index 9e66b04a6..559533eb8 100644
--- a/src/rtFileDownloader.h
+++ b/src/rtFileDownloader.h
@@ -225,7 +230,7 @@ public:
     void downloadFileAsByteRange(rtFileDownloadRequest* downloadRequest);
     void setDefaultCallbackFunction(void (*callbackFunction)(rtFileDownloadRequest*));
     bool downloadFromNetwork(rtFileDownloadRequest* downloadRequest);
-    bool downloadByteRangeFromNetwork(rtFileDownloadRequest* downloadRequest, bool *bRedirect);
+    bool downloadByteRangeFromNetwork(rtFileDownloadRequest* downloadRequest, int *redirectCount);
     void checkForExpiredHandles();
 
 private:
